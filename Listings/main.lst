A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:13:44 PAGE     1


MACRO ASSEMBLER A51 V8.02c
OBJECT MODULE PLACED IN .\Objects\main.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE main.a51 NOMOD51 SET(SMALL) DEBUG PRINT(.\Listings\main.lst) OBJECT(.\O
                      bjects\main.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     
                       2     ;*******************************************
                       3     ;* Sensors & Microsystem electronics       *
                       4     ;*                                         *
                       5     ;* Names: Steven Peters - Thomas Lapauw    *
                       6     ;*                                         *
                       7     ;*                Task 9                   *
                       8     ;*                                         *
                       9     ;*******************************************
                      10     
                      11     
                      12     ;Special register declarations
                      13     ;$include (t89c51cc01.inc)
                +1    14     ;*INC*************************************************************************
                +1    15     ; NAME: 89C51CC01.inc           
                +1    16     ;----------------------------------------------------------------------------
                +1    17     ; PURPOSE: for Keil
                +1    18     ;*****************************************************************************
                +1    19     
                +1    20     ;----------------------------------------
                +1    21     ; Include file for 8051 SFR Definitions  
                +1    22     ;----------------------------------------
                +1    23     
                +1    24     ;  BYTE Register 
  0080          +1    25     P0      DATA    80H
  0090          +1    26     P1      DATA    90H
  00A0          +1    27     P2      DATA    0A0H
                +1    28     
  00B0          +1    29     P3      DATA    0B0H
  00B7          +1    30     RD      BIT     0B7H
  00B6          +1    31     WR      BIT     0B6H
  00B5          +1    32     T1      BIT     0B5H
  00B4          +1    33     T0      BIT     0B4H
  00B3          +1    34     INT1    BIT     0B3H
  00B2          +1    35     INT0    BIT     0B2H
  00B1          +1    36     TXD     BIT     0B1H
  00B0          +1    37     RXD     BIT     0B0H
                +1    38     
  00C0          +1    39     P4      DATA    0C0H
                +1    40     
  00D0          +1    41     PSW     DATA    0D0H
  00D7          +1    42     CY      BIT     0D7H
  00D6          +1    43     AC      BIT     0D6H
  00D5          +1    44     F0      BIT     0D5H
  00D4          +1    45     RS1     BIT     0D4H
  00D3          +1    46     RS0     BIT     0D3H
  00D2          +1    47     OV      BIT     0D2H
  00D0          +1    48     P       BIT     0D0H
                +1    49     
  00E0          +1    50     ACC     DATA    0E0H
  00F0          +1    51     B       DATA    0F0H
  0081          +1    52     SP      DATA    81H
  0082          +1    53     DPL     DATA    82H
  0083          +1    54     DPH     DATA    83H
  0087          +1    55     PCON    DATA    87H
  008F          +1    56     CKCON   DATA    8FH
                +1    57     
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:13:44 PAGE     2

                +1    58     ;------------------ TIMERS registers ---------------------
  0088          +1    59     TCON    DATA    88H
  008F          +1    60     TF1     BIT     8FH
  008E          +1    61     TR1     BIT     8EH
  008D          +1    62     TF0     BIT     8DH
  008C          +1    63     TR0     BIT     8CH
  008B          +1    64     IE1     BIT     8BH
  008A          +1    65     IT1     BIT     8AH
  0089          +1    66     IE0     BIT     89H
  0088          +1    67     IT0     BIT     88H
                +1    68             
  0089          +1    69     TMOD    DATA    89H
                +1    70     
  00C8          +1    71     T2CON   DATA    0C8H
  00CF          +1    72     TF2     BIT     0CFH
  00CE          +1    73     EXF2    BIT     0CEH
  00CD          +1    74     RCLK    BIT     0CDH
  00CC          +1    75     TCLK    BIT     0CCH
  00CB          +1    76     EXEN2   BIT     0CBH
  00CA          +1    77     TR2     BIT     0CAH
  00C9          +1    78     C_T2    BIT     0C9H
  00C8          +1    79     CP_RL2  BIT     0C8H
                +1    80             
  00C9          +1    81     T2MOD   DATA    0C9H    
  008A          +1    82     TL0     DATA    8AH
  008B          +1    83     TL1     DATA    8BH
  00CC          +1    84     TL2     DATA    0CCH
  008C          +1    85     TH0     DATA    8CH
  008D          +1    86     TH1     DATA    8DH
  00CD          +1    87     TH2     DATA    0CDH    
  00CA          +1    88     RCAP2L  DATA    0CAH    
  00CB          +1    89     RCAP2H  DATA    0CBH    
  00A6          +1    90     WDTRST  DATA    0A6H    
  00A7          +1    91     WDTPRG  DATA    0A7H    
                +1    92     
                +1    93     
                +1    94     ;------------------- UART registers ------------------------
  0098          +1    95     SCON    DATA    98H
  009F          +1    96     SM0     BIT     9FH
  009F          +1    97     FE      BIT     9FH
  009E          +1    98     SM1     BIT     9EH
  009D          +1    99     SM2     BIT     9DH
  009C          +1   100     REN     BIT     9CH
  009B          +1   101     TB8     BIT     9BH
  009A          +1   102     RB8     BIT     9AH
  0099          +1   103     TI      BIT     99H
  0098          +1   104     RI      BIT     98H
                +1   105     
  0099          +1   106     SBUF    DATA    99H
  00B9          +1   107     SADEN   DATA    0B9H
  00A9          +1   108     SADDR   DATA    0A9H    
                +1   109     
                +1   110     ;-------------------- ADC registers ----------------------
  00F2          +1   111     ADCLK   DATA    0F2H    
  00F3          +1   112     ADCON   DATA    0F3H    
  00F4          +1   113     ADDL    DATA    0F4H    
  00F5          +1   114     ADDH    DATA    0F5H    
  00F6          +1   115     ADCF    DATA    0F6H    
                +1   116     
                +1   117     ;-------------------- FLASH EEPROM registers ------------
  00F1          +1   118     FPGACON  DATA   0F1H    
  00D1          +1   119     FCON    DATA    0D1H    
  00D2          +1   120     EECON   DATA    0D2H    
  008E          +1   121     AUXR    DATA    8EH
  00A2          +1   122     AUXR1   DATA    0A2H
                +1   123     
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:13:44 PAGE     3

                +1   124     ;-------------------- IT registers -----------------------
  00F8          +1   125     IPL1    DATA    0F8H    
  00F7          +1   126     IPH1    DATA    0F7H    
  00A8          +1   127     IEN0    DATA    0A8H    
  00B8          +1   128     IPL0    DATA    0B8H    
  00B7          +1   129     IPH0    DATA    0B7H    
  00E8          +1   130     IEN1    DATA    0E8H    
                +1   131     
                +1   132     ;  IEN0  
  00AF          +1   133     EA      BIT     0AFH
  00AE          +1   134     EC      BIT     0AEH
  00AD          +1   135     ET2     BIT     0ADH
  00AC          +1   136     ES      BIT     0ACH
  00AB          +1   137     ET1     BIT     0ABH
  00AA          +1   138     EX1     BIT     0AAH
  00A9          +1   139     ET0     BIT     0A9H
  00A8          +1   140     EX0     BIT     0A8H
                +1   141     
                +1   142     ;  IEN1 
  00EA          +1   143     ETIM    BIT     0EAH
  00E9          +1   144     EADC    BIT     0E9H
  00E8          +1   145     ECAN    BIT     0E8H
                +1   146     
                +1   147     ;--------------------- PCA registers --------------------
  00D8          +1   148     CCON    DATA    0D8H    
  00DF          +1   149     CF              BIT             0DFH
  00DE          +1   150     CR              BIT             0DEH
  00D4          +1   151     CCF4    BIT             0D4H
  00D3          +1   152     CCF3    BIT             0D3H
  00D2          +1   153     CCF2    BIT             0D2H
  00D1          +1   154     CCF1    BIT             0D1H
  00D0          +1   155     CCF0    BIT             0D0H
                +1   156     
  00D9          +1   157     CMOD    DATA    0D9H    
  00F9          +1   158     CH      DATA    0F9H    
  00E9          +1   159     CL      DATA    0E9H    
  00FA          +1   160     CCAP0H  DATA    0FAH    
  00EA          +1   161     CCAP0L  DATA    0EAH    
  00DA          +1   162     CCAPM0  DATA    0DAH    
  00FB          +1   163     CCAP1H  DATA    0FBH    
  00EB          +1   164     CCAP1L  DATA    0EBH    
  00DB          +1   165     CCAPM1  DATA    0DBH    
  00FC          +1   166     CCAP2H  DATA    0FCH    
  00EC          +1   167     CCAP2L  DATA    0ECH    
  00DC          +1   168     CCAPM2  DATA    0DCH    
  00FD          +1   169     CCAP3H  DATA    0FDH    
  00ED          +1   170     CCAP3L  DATA    0EDH    
  00DD          +1   171     CCAPM3  DATA    0DDH    
  00FE          +1   172     CCAP4H  DATA    0FEH    
  00EE          +1   173     CCAP4L  DATA    0EEH    
  00DE          +1   174     CCAPM4  DATA    0DEH    
                +1   175     
                +1   176     ;------------------- CAN registers --------------------------
  009B          +1   177     CANGIT          DATA    09BH
  009C          +1   178     CANTEC          DATA    09CH
  009D          +1   179     CANREC          DATA    09DH
  00A1          +1   180     CANTCON         DATA    0A1H    
  00A3          +1   181     CANMSG          DATA    0A3H    
  00A4          +1   182     CANTTCL         DATA    0A4H    
  00A5          +1   183     CANTTCH         DATA    0A5H    
  00AA          +1   184     CANGSTA         DATA    0AAH
  00AB          +1   185     CANGCON         DATA    0ABH
  00AC          +1   186     CANTIML         DATA    0ACH    
  00AD          +1   187     CANTIMH         DATA    0ADH    
  00AE          +1   188     CANSTMPL        DATA    0AEH    
  00AF          +1   189     CANSTMPH        DATA    0AFH
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:13:44 PAGE     4

  00B1          +1   190     CANPAGE         DATA    0B1H
  00B2          +1   191     CANSTCH         DATA    0B2H    
  00B3          +1   192     CANCONCH        DATA    0B3H    
  00B4          +1   193     CANBT1          DATA    0B4H
  00B5          +1   194     CANBT2          DATA    0B5H
  00B6          +1   195     CANBT3          DATA    0B6H
  00BA          +1   196     CANSIT1         DATA    0BAH
  00BB          +1   197     CANSIT2         DATA    0BBH    
  00BC          +1   198     CANIDT1         DATA    0BCH
  00BD          +1   199     CANIDT2         DATA    0BDH    
  00BE          +1   200     CANIDT3         DATA    0BEH    
  00BF          +1   201     CANIDT4         DATA    0BFH    
  00C1          +1   202     CANGIE          DATA    0C1H
  00C2          +1   203     CANIE1          DATA    0C2H    
  00C3          +1   204     CANIE2          DATA    0C3H
  00C4          +1   205     CANIDM1         DATA    0C4H
  00C5          +1   206     CANIDM2         DATA    0C5H
  00C6          +1   207     CANIDM3         DATA    0C6H
  00C7          +1   208     CANIDM4         DATA    0C7H
  00CE          +1   209     CANEN1          DATA    0CEH
  00CF          +1   210     CANEN2          DATA    0CFH
                +1   211     
                +1   212     
                     213     
                     214     
----                 215     DSEG AT 30h
                     216     
  0054               217             cursor DATA 54h
  0053               218             blockIndex DATA 53h
  0057               219             blockIteration DATA 57h
  005A               220             ADCVal DATA 5Ah
----                 221     CSEG    
                     222     ;Boot code
0000                 223     ORG 0000h
0000 020046          224     LJMP init 
                     225     
                     226     ;Interrupt address vectors
000B                 227     ORG 000Bh
000B 0200AB          228     LJMP ISR_tmr0
                     229     
001B                 230     ORG 001Bh
001B 020113          231     LJMP ISR_tmr1
                     232     
0043                 233     ORG 0043h
0043 02014A          234     LJMP ISR_ADC
                     235     
                     236     
                     237     
                     238     
                     239     ;Address declarations
  0030               240     vidMemStart EQU 030h
  0052               241     vidMemEnd EQU 052h
  0023               242     vidMemLength EQU 35
                     243     
  0028               244     numberOfCollumns EQU 40
  0007               245     numberOfRows EQU 7
  0005               246     bytesPerRow EQU 5
                     247             
  0008               248     bytesPerBlock EQU 8
                     249             
  00FE               250     cursorByte EQU 11111110b
  0001               251     cursorByteMask EQU 00000001b
                     252     
                     253     
                     254     
                     255     
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:13:44 PAGE     5

                     256     ;Initialization code
0046                 257     init:   
                     258     
                     259     ;**************** Init Timers **********************************
0046 758911          260                             MOV TMOD,#00010001b ;config tmr0 & tmr1 in 16bit mode
0049 758CFF          261                             MOV TH0,#0FFh ;tmr0 MSB
004C 758AFF          262                             MOV TL0,#0FFh ;tmr0 LSB
                     263                             
004F 758DFF          264                             MOV TH1,#0FFh ;tmr0 MSB
0052 758BFF          265                             MOV TL1,#0FFh ;tmr0 LSB
                     266                             
0055 D2AB            267                             SETB ET1
0057 D2A9            268                             SETB ET0 ;enable interrupt of tmr0
                     269     
                     270     
0059 758170          271                             MOV SP, #70h ; move stackpointer above registers
                     272                              
                     273                              
005C 1201B3          274             LCALL gameInit
                     275     
                     276     ;*********************** ADC CONFIG ***********************************************
                     277             ; Setup for the ADC
005F 75F6FF          278             MOV ADCF,#0FFh ;enable the adc...
0062 D2E9            279             SETB EADC
0064 75F32F          280             MOV ADCON, #00101111b ; set P1.0 as ADC input
0067 755A60          281             MOV ADCVal,#01100000b
                     282     
                     283             
                     284     ;************* end of init: enable timers *********************
                     285     
006A D28C            286     SETB TR0 ;run tmr0
006C D28E            287     SETB TR1
006E D2AF            288     SETB EA ;global interrupt enable
                     289     
0070 C2A3            290     CLR P2.3 ;led to see if code is running
0072 020075          291     LJMP main
                     292     
                     293                             
                     294     ;*********************************Main program***************************************
0075                 295     main:           
                     296     ;does except update the random numbers actually everything happens timer based since the up
                             dating of either one is mutually exclusive, 
                     297     ;no interrupt may happen while they are busy
0075 120200          298             LCALL LFSR ; update ranom value
0078 3059FA          299             JNB 59h, main ; if not game over go back to main
                     300                                     ;this is the game over routine
007B C2D4            301             CLR RS1 ;move to registerbank 00h to 08h
007D C2D3            302             CLR RS0 
                     303             ;stop timers shortly to not interrupt the vid mem update, this routine only happens
                              when game over so no problem
007F C2AF            304             CLR EA ;global interrupt disable since the video memory may not be updated while th
                             e screen is updated
0081 C28C            305             CLR TR0 ;stop tmr0
0083 C28E            306             CLR TR1
                     307                             
0085 7827            308             MOV R0,#39
0087 7900            309             MOV R1,#0
0089 900280          310             MOV DPTR,#game_over
008C                 311     gameOverLoop:
008C E8              312             MOV A,R0
008D 93              313             MOVC A,@A+DPTR
008E FF              314             MOV R7,A
008F 1201CF          315             LCALL dispColShift
0092 D8F8            316             DJNZ R0,gameOverLoop
0094 E8              317             MOV A,R0
0095 93              318             MOVC A,@A+DPTR
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:13:44 PAGE     6

0096 FF              319             MOV R7,A
0097 1201CF          320             LCALL dispColShift
                     321             ;restart the timers after update
009A D28C            322             SETB TR0 ;run tmr0
009C D28E            323             SETB TR1
009E D2AF            324             SETB EA ;global interrupt enable
                     325     
00A0 1201E7          326             LCALL delay
00A3 1201B3          327             LCALL gameInit
00A6 C259            328             CLR 59h 
                     329             
00A8 020075          330             LJMP main
                     331                     
                     332     ;******************************* Interrupt handlers *********************************
                     333     
                     334     ; This timer refreshes the screen at a fast enough rate
                     335     ; it gets the data from the ram and shifts it onto the display.
                     336     ; based on the value of the ADC it also shows the cursor on the correct location.  
00AB                 337     ISR_tmr0: 
00AB C2AF            338                             CLR EA ;global interrupt disable since the video memory may not be 
                             updated while the screen is updated
00AD C28C            339                             CLR TR0 ;stop tmr0
00AF C28E            340                             CLR TR1
                     341                             
                     342                             ;reload timer0
00B1 758CD0          343                             MOV TH0,#0D0h ;tmr0 MSB
00B4 758A00          344                             MOV TL0,#000h ;tmr0 LSB
                     345                             
                     346     ;DISPLAY PART
00B7 C2D4            347                     CLR RS1 ;move to registerbank 08h to 0Fh to prevent overwriting of register
                             s
00B9 D2D3            348                     SETB RS0
                     349                     
                     350             ;This parts displays the game background on the screen from ram
00BB 7907            351                     MOV R1, #numberOfRows ;counting register to 8 for rows
00BD 7A7F            352                     MOV R2, #01111111b ;data rows (msb = 0, others are 1) single bit zero, to e
                             nable current row
00BF 7830            353                     MOV R0, #vidMemStart ; starting adress disp mem
00C1                 354     rowIteration:
                     355     
00C1 7F05            356                             MOV R7, #bytesPerRow ; counter for 5 bytes of row data
00C3                 357     lineBytes:
00C3 E6              358                             MOV A,@R0 ; get data from ram starting at the lowest address
00C4 FE              359                             MOV R6,A ; move data to R6 to shift it into the screen
00C5 3162            360                             acall shiftR6 ; shift byte into screen
00C7 08              361                             INC R0 ; increase address by one for next byte to put onto the scre
                             en
00C8 DFF9            362                             DJNZ R7,lineBytes ; rinse and repeat for the full row
                     363                             
                     364                             ;shift R2 with the current row enabled in the register
00CA EA              365                             MOV A,R2
00CB FE              366                             MOV R6, A
00CC 3162            367                             Acall shiftR6 ; shift column data byte into SR
00CE D2B2            368                             SETB P3.2 ; cycle store clock
00D0 C2B2            369                             CLR P3.2
                     370     
                     371                             ;rotate row bit to enable next row
00D2 EA              372                             MOV A, R2 
00D3 03              373                             RR A
00D4 FA              374                             MOV R2,A
                     375                              ; repeat until 7 rows done
00D5 D9EA            376                             DJNZ R1, rowIteration
                     377     
00D7                 378     blankDisplay:
00D7 7EFF            379                             MOV R6, #0FFh ; put all ones in the row select shift register = all
                              off
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:13:44 PAGE     7

00D9 3162            380                             Acall shiftR6 ; shift collumn data byte into SR
00DB D2B2            381                             SETB P3.2 ; cycle store clock
00DD C2B2            382                             CLR P3.2
                     383                             
00DF 205926          384                             JB 59h,afterCollision ; if game over skip the cursor
                     385             ;This part displays the cursor, making use of the duty cycle of the previous displa
                             y part over the timerperiod,
                     386             ;the bringhtness of the cursor can be controlled
                     387             
00E2 7904            388                             MOV R1, #04  ;the first 4 bytes that are shifted into the register 
                             puts all those leds off
00E4                 389     cursorLbl:                       ;loop to approximate the timing of the other rows to have 
                             similar brightness
00E4 7EFF            390                             MOV R6, #0FFh
00E6 3162            391                             Acall shiftR6 ; shift collumn data byte into SR
00E8 D9FA            392                             DJNZ R1,cursorLbl
                     393                             
00EA 7EFE            394                             MOV R6, #cursorByte ;shift this byte into the shift registers to en
                             able a led in the eight row of the display to be matched with the cursor location
00EC 3162            395                             Acall shiftR6 ; shift collumn data byte into SR
                     396                             
                     397     
                     398                             ;MOV R6, #11101111b
00EE E55A            399                             MOV A,ADCVal ;get the last updated value of the adc to A
00F0 75F025          400                             MOV B,#37 
00F3 84              401                             DIV AB ;divide the ADC value to get a value between 0 and 6 to for 
                             the cursor position
00F4 FE              402                             MOV R6, A ;stockate in R6
00F5 74FD            403                             MOV A,#11111101b ;A single pixel for the row enable
                     404     
00F7                 405             locationLbl:
00F7 23              406                             RL A
00F8 DEFD            407                             DJNZ R6,locationLbl  ;rotate cursor data equal to location previous
                             ly calculated
00FA 4401            408                             ORL A,#00000001b ;mask data over the display       ;TODO: mag evt w
                             eg
00FC F554            409                             MOV cursor,A
00FE FE              410                             MOV R6,A ; move cursor data to R6 for shift
                     411                             
00FF 3162            412                             Acall shiftR6 ; shift cursor position data byte into SR for row ena
                             ble
0101 D2B2            413                             SETB P3.2 ; cycle store clock
0103 C2B2            414                             CLR P3.2
                     415                             
                     416                             
0105 120173          417                             LCALL detectCollision ; check if a collision with the background ha
                             ppened with the current cursor position ;TODO: mag evt na de timers geplaatst worden
0108                 418                             afterCollision:
                     419     
0108 C2D4            420                             CLR RS1 ;move to registerbank 00h to 08h
010A C2D3            421                             CLR RS0 
                     422                             ;reenable timers
010C D28C            423                             SETB TR0 ;run tmr0
010E D28E            424                             SETB TR1
0110 D2AF            425                             SETB EA ;global interrupt disable
                     426                             
0112 32              427                             RETI
                     428     
                     429     ;************************** This timers updates the background of the game ****************
                             ******************
0113                 430     ISR_tmr1:
                     431     ;DISPLAY PART
0113 C28C            432                     CLR TR0 ;stop timer during buffer update
0115 C28E            433                     CLR TR1 ;stop timer during buffer update
0117 C2AF            434                     CLR EA ;global interrupt disable
                     435                     
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:13:44 PAGE     8

                     436                     ;reload timers
0119 758D00          437                     MOV TH1,#00h ;tmr0 MSB
011C 758B00          438                     MOV TL1,#00h ;tmr0 LSB
                     439                     
011F C0E0            440                     push Acc
0121 20591B          441                     JB 59h,afterRandom
                     442                     ;get the current block index from ram
0124 E553            443                     MOV A, blockIndex
0126 900238          444                     MOV DPTR, #block0               ; start at block0 and count from there
0129 93              445                     MOVC A,@A+DPTR
012A FF              446                     MOV R7,A ; stockate data in R7 for collumnshift function
012B 1201CF          447                     LCALL dispColShift ; shift the new collumn in
                     448                     
012E E553            449                     MOV A, blockIndex ; retrieve current data offset
0130 04              450                     INC A; advance one adress
0131 F553            451                     MOV blockIndex, A ; save current adress
                     452                     
0133 AB57            453                     MOV R3, blockIteration ;get current iteration from address this counts the 
                             number of collumns from a certain block that have already been shifted
                     454                     
0135 DB08            455                     DJNZ R3, afterRandom ; if the last collumn of the block is not updated jump
                              over the generation of the next block
                     456                     
0137 7B08            457                     MOV R3,#bytesPerBlock ; repeat 4 times
0139 E518            458                     MOV A,18h ; get data from MSB LFSR
013B 5438            459                     ANL A,#0111000b ;mask for the number of blocks  instead of dividing, this k
                             eeps 8 possible values for the 8 blocks,
                     460                                                     ;with a distance of 8 from each other match
                             ing the number of collumns of a block
013D F553            461                     MOV blockIndex, A ; save current adress for next block
                     462     
013F                 463             afterRandom:
013F 8B57            464                     MOV blockIteration,R3 ;this saves the current shifted collumn count of a bl
                             ock in ram 
                     465                     ;pop A and restart timers
0141 D0E0            466                     pop Acc
0143 D28E            467                     SETB TR1 
0145 D28C            468                     SETB TR0
0147 D2AF            469                     SETB EA
                     470     
0149 32              471     reti
                     472     
                     473     
                     474     ;*********************** This interrupt updates the value from the ADC ********************
                             **************
014A                 475     ISR_ADC:
                     476     
014A C28C            477                     CLR TR0 ;stop timer during buffer update
014C C28E            478                     CLR TR1 ;stop timer during buffer update
014E C2AF            479                     CLR EA ;global interrupt disable
                     480                     
0150 C0E0            481     push Acc
0152 E5F5            482             MOV A, ADDH ;get the highest 8 bits, low resolution is not needed,
0154 F55A            483             MOV ADCVal,A ; move the value to ram
0156 75F32F          484             MOV ADCON, #00101111b ; set P1.0 as ADC input, restart conversion
0159 D0E0            485     pop Acc
                     486     
015B D28E            487                     SETB TR1 ;stop timer during buffer update
015D D28C            488                     SETB TR0
015F D2AF            489                     SETB EA
0161 32              490     reti
                     491     
                     492     
                     493     ;******************************************************************************************
                             ************
                     494     ;********************************* HELPER FUNCTIONS ***************************************
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:13:44 PAGE     9

                             **********
                     495     ;******************************************************************************************
                             **********
                     496     
                     497     
                     498     ;**************************$ This function shifts the byte stockated in R6 into the shiftre
                             gisters connected to P4.1****************************************
0162                 499     shiftR6:
0162 C0E0            500                                     push Acc
0164 EE              501                                     MOV A, R6  ; move the value to A
0165 7E08            502                                     MOV R6, #08 ;counting register to 8
0167                 503                                     Reg:
0167 13              504                                     RRC A ;rotate accumulator troug carre to get the the LSB in
                             to the carry
0168 92C1            505                                     MOV P4.1,C ;carry to the data pin
016A D2C0            506                                     SETB P4.0 ; cycle serial clock
016C C2C0            507                                     CLR P4.0
016E DEF7            508                                     DJNZ R6,Reg ;if 8 bits are shifted go further otherwise rep
                             eat
0170 D0E0            509                                     pop Acc
0172 22              510                                     ret
                     511     
                     512     ;**************************$ This function detects the collisions of the cursor with the ba
                             ckground blocks **************************************************
0173                 513     detectCollision:
                     514     
                     515     ; this moves the eight collumn of the display data into a single byte to be matched with th
                             e cursor position
0173 E534            516             MOV A,34h ;get the byte of the first row
0175 13              517             RRC A ;shift the LSB into the carry, this matches the eight collumn of that row.
0176 9267            518             MOV 67h,C ;stockate C in the MSB of the collumn
                     519             
0178 E539            520             MOV A,39h ;second row
017A 13              521             RRC A
017B 9266            522             MOV 66h,C ;C to MSB-1
                     523             
017D E53E            524             MOV A,3Eh
017F 13              525             RRC A
0180 9265            526             MOV 65h,C
                     527             
0182 E543            528             MOV A,43h
0184 13              529             RRC A
0185 9264            530             MOV 64h,C
                     531             
0187 E548            532             MOV A,48h
0189 13              533             RRC A
018A 9263            534             MOV 63h,C
                     535             
018C E54D            536             MOV A,4Dh
018E 13              537             RRC A
018F 9262            538             MOV 62h,C
                     539             
0191 E552            540             MOV A,52h ; seventh row, to LSB + 1
0193 13              541             RRC A
0194 9261            542             MOV 61h,C
                     543     
0196 C260            544             CLR 60h ; clear the LSB ;TODO needed?
                     545             
0198 E52C            546             MOV A,2Ch ;move the constructed byte to A
019A F4              547             CPL A ; complement it because all the 0 represent walls
019B F52C            548             MOV 2Ch,A ; move it back
                     549     
019D E554            550             MOV A,cursor ; get the cursor data
019F F4              551             CPL A ; complement it since the 0 is where the cursor is, all others should be 1
01A0 54FE            552             ANL A,#11111110b ; mask it so possible residual data on the invisible eight row doe
                             s not influence the detection
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:13:44 PAGE    10

01A2 552C            553             ANL A,2Ch ; And the cursor positon in A with the eight collumn of the screen
                     554                               ; if the cursor is on the same location as a lit pixel (obstackle
                             /wall) the AND will produce a 1 on a certain position
                     555             
01A4 7001            556             JNZ dead ; if the AND action is !=0 a collision is detected , then jump to the dead
                              routine
                     557     
01A6 22              558             ret
                     559             
                     560     ;***************** This routine is executed when a collision is detected ******************
                             **
01A7                 561     dead:
                     562     
                     563     ; this clear the game field in ram
01A7 7828            564     MOV R0,#numberOfCollumns
01A9                 565     gameReset:
01A9 7FFF            566                     MOV R7,#0FFh ; stockate data in R7 for collumnshift
01AB 1201CF          567                     LCALL dispColShift
01AE D8F9            568                     DJNZ R0, gameReset
01B0 D259            569     SETB 59h ;set game over state
01B2 22              570     ret ;return to caller (ISR_tmr0)
                     571     
                     572     
01B3                 573     gameInit:
                     574     ;***************** Initialize ram to all ones (all leds off)*******************************
                                           
01B3 7830            575                             MOV R0,#vidMemStart 
01B5 7928            576                             MOV R1,#numberOfCollumns
01B7                 577     ramInit:
01B7 76FF            578                             MOV @R0,#0FFh
01B9 08              579                             INC R0
01BA D9FB            580                             DJNZ R1,ramInit
                     581                             
                     582     ;***************** Init the game logic  *************************
01BC 75186A          583     MOV 18h, #1101010b 
                     584     
01BF 7B08            585     MOV R3,#bytesPerBlock ; repeat 4 times
01C1 E518            586     MOV A,18h ; get data from MSB LFSR
01C3 5438            587     ANL A,#0111000b ;mask for the number of blocks          
01C5 F553            588     MOV blockIndex, A ; save current adress for next block
01C7 120200          589     LCALL LFSR  ; generate new random data
01CA B2A4            590     CPL P2.4 ; toggle led to see if working
01CC 8B57            591     MOV blockIteration,R3
                     592     
01CE 22              593     ret
                     594     
                     595     
                     596     
                     597             
                     598     
                     599     ;*************************** This function shifts a collumn in the game to make it go forwa
                             rd *******************
                     600     
                     601     ;shift 7 MSB in framebuffer
01CF                 602     dispColShift:
01CF EF              603             MOV A, R7 ; move the collumn that needs to be shifted in from R7 into A
01D0 7D07            604             MOV     R5, #numberOfRows ;counter to count rows 
01D2 7930            605             MOV R1, #vidMemStart ; start at lowest address to increase each time
01D4                 606     dispColShiftLoop: ; this part is looped
01D4 13              607             RRC A ;Rotate LSB in carry to shift into the row
01D5 7E05            608             MOV     R6, #bytesPerRow ; counter to rotate 5 horizontal bytes will be used in dis
                             pRowShift to count the progress
                     609             
01D7 C0E0            610             PUSH ACC ; push acc to save current data of A
01D9 31E0            611             ACALL dispRowShift ; rotate all row bytes 
01DB D0E0            612             POP ACC ;pop the accumulator
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:13:44 PAGE    11

01DD DDF5            613             DJNZ R5, dispColShiftLoop ; repeat until all rows are shifted
01DF 22              614             RET
                     615             
                     616             
                     617             ;TODO move this into the dispColShiftLoop instead of calling it
01E0                 618     dispRowShift: ; this rotates the carry into the current memory address
01E0 E7              619             MOV A,@R1 ;start at the current addres and move it from RAM into A
01E1 33              620             RLC A ;rotate the carry into the LSB of the current byte, the LSB comes into the th
                             e carry 
01E2 F7              621             MOV @R1,A ;move the updated byte back into ram
01E3 09              622             INC R1   ;increase for the next byte
01E4 DEFA            623             DJNZ R6, dispRowShift ; do this until the current row is updated. The carry becomes
                              the LSB, the MSB becomes the carry to become the LSB of the next byte
01E6 22              624             RET
                     625             
                     626             
                     627             
                     628             
                     629     ;rudimentary delay for test purposes
01E7                 630     delay:   
01E7 7D0F            631                     MOV R5, #0Fh
01E9 1201ED          632                     LCALL loop
01EC 22              633                     RET
                     634     
01ED                 635     loop:   
01ED 7E00            636                     MOV R6, #00h
01EF 1201F5          637                     LCALL loop2
01F2 DDF9            638                     DJNZ R5, loop
01F4 22              639                     RET
01F5                 640     loop2:  
01F5 7F00            641                     MOV R7, #00h
01F7 1201FD          642                     LCALL loop3
01FA DEF9            643                     DJNZ R6, loop2
01FC 22              644                     RET
                     645                     
01FD DFFE            646     loop3:  DJNZ R7,loop3
01FF 22              647                     RET
                     648                     
                     649     ;**********************************************************************************        
                                  
                     650     ;random number generator code trough LFSR               
0200                 651     LFSR: 
0200 D2D4            652             SETB RS1 ;move to registerbank 08h to 0Fh
0202 D2D3            653             SETB RS0
0204 E8              654             MOV A,R0 ;Save highest byte to address
0205 FC              655             MOV R4,A
0206 12022B          656             lcall LFSRShift
0209 12022B          657             lcall LFSRShift
020C 6C              658             XRL A,R4
020D FC              659             MOV R4,A
020E 12022B          660             lcall LFSRShift
0211 12022B          661             lcall LFSRShift
0214 12022B          662             lcall LFSRShift
0217 12022B          663             lcall LFSRShift
021A 6C              664             XRL A,R4
021B FC              665             MOV R4,A                
021C 12022B          666             lcall LFSRShift
021F 6C              667             XRL A,R4
0220 FC              668             MOV R4,A
0221 12022B          669             lcall LFSRShift
0224 EC              670             MOV A,R4
0225 FB              671             MOV R3,A
                     672             
0226 C2D4            673             CLR RS1 ;move to registerbank 08h to 0Fh
0228 C2D3            674             CLR RS0
                     675             
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:13:44 PAGE    12

022A 22              676             RET
                     677             
                     678     ;shift the 32 bit registers of the LFSR
022B                 679     LFSRShift: 
022B EB              680             MOV A,R3 ; rotate shift register
022C 33              681             RLC A
022D FB              682             MOV R3,A
022E EA              683             MOV A,R2 ; rotate shift register
022F 33              684             RLC A
0230 FA              685             MOV R2,A
0231 E9              686             MOV A,R1 ; rotate shift register
0232 33              687             RLC A
0233 F9              688             MOV R1,A
0234 E8              689             MOV A,R0 ; rotate shift register
0235 33              690             RLC A
0236 F8              691             MOV R0,A
0237 22              692             ret     
                     693             
                     694     ;******************************************************************************************
                             ***********************
                     695     ;************************************* DIRECT BYTES IN CODE MEMORY ************************
                             **********************
                     696     ;******************************************************************************************
                             ********************$
                     697     
                     698     ;*********************** These are the obstackle blocks ***********************************
                             ****************
0238                 699             block0:
0238 3E              700             db 0x3e
0239 3E              701             db 0x3e
023A 3E              702             db 0x3e
023B 3E              703             db 0x3e
023C 3E              704             db 0x3e
023D 3E              705             db 0x3e
023E 3E              706             db 0x3e
023F 3E              707             db 0x3e
                     708             
                     709             
0240                 710             block1:
                     711             
0240 3E              712             db 0x3e
0241 3E              713             db 0x3e
0242 3E              714             db 0x3e
0243 1C              715             db 0x1C
0244 1C              716             db 0x1C
0245 1C              717             db 0x1C
0246 3E              718             db 0x3e
0247 3E              719             db 0x3e
                     720             
0248                 721             block2:
                     722             
0248 3E              723             db 0x3e
0249 3E              724             db 0x3e
024A 3E              725             db 0x3e
024B 38              726             db 0x38
024C 38              727             db 0x38
024D 38              728             db 0x38
024E 3E              729             db 0x3e
024F 3E              730             db 0x3e
                     731                     
0250                 732             block3:
                     733             
0250 3E              734             db 0x3e
0251 3E              735             db 0x3e
0252 3E              736             db 0x3e
0253 18              737             db 0x18
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:13:44 PAGE    13

0254 18              738             db 0x18
0255 18              739             db 0x18
0256 3E              740             db 0x3e
0257 3E              741             db 0x3e
                     742                     
0258                 743             block4:
                     744             
0258 3E              745             db 0x3e
0259 3E              746             db 0x3e
025A 3E              747             db 0x3e
025B 06              748             db 0x06
025C 06              749             db 0x06
025D 3E              750             db 0x3e
025E 3E              751             db 0x3e
025F 3E              752             db 0x3e
                     753             
0260                 754             block5:
0260 3E              755             db 0x3e
0261 3E              756             db 0x3e
0262 3E              757             db 0x3e
0263 08              758             db 0x08
0264 08              759             db 0x08
0265 3E              760             db 0x3e
0266 3E              761             db 0x3e
0267 3E              762             db 0x3e
                     763                     
0268                 764             block6:
                     765             
0268 3E              766             db 0x3e
0269 3E              767             db 0x3e
026A 3E              768             db 0x3e
026B 32              769             db 0x32
026C 32              770             db 0x32
026D 3E              771             db 0x3e
026E 3E              772             db 0x3e
026F 3E              773             db 0x3e
                     774                     
0270                 775             block7:
0270 3E              776             db 0x3e
0271 3E              777             db 0x3e
0272 3E              778             db 0x3e
0273 26              779             db 0x26
0274 26              780             db 0x26
0275 3E              781             db 0x3e
0276 3E              782             db 0x3e
0277 3E              783             db 0x3e
                     784                     
0278                 785             block8:
0278 3E              786             db 0x3e
0279 3E              787             db 0x3e
027A 3E              788             db 0x3e
027B 26              789             db 0x26
027C 26              790             db 0x26
027D 3E              791             db 0x3e
027E 3E              792             db 0x3e
027F 3E              793             db 0x3e
                     794                     
                     795     ;Letters
0280                 796     game_over:
                     797     
                     798             ;;r
                     799             ;db 11010011b
0280 CB              800             db 11001011b
                     801             ;db 10101111b
0281 F5              802             db 11110101b
                     803             ;db 10101111b
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:13:44 PAGE    14

0282 F5              804             db 11110101b
                     805             ;db 10000011b
0283 C1              806             db 11000001b
                     807                     ;;e
                     808             ;db 10111011b
0284 FF              809             db 11111111b
                     810             ;db 10101011b
0285 D5              811             db 11010101b
                     812             ;db 10101011b
0286 D5              813             db 11010101b
                     814             ;db 10000011b
0287 C1              815             db 11000001b
                     816             ;db 11111111b
0288 FF              817             db 11111111b
                     818             
                     819             ;;v
                     820             ;db 10000111b
0289 E1              821             db 11100001b
                     822             ;db 11111011b
028A DF              823             db 11011111b
                     824             ;db 11111011b
028B DF              825             db 11011111b
                     826             ;db 10000111b
028C E1              827             db 11100001b
                     828             ;db 11111111b
028D FF              829             db 11111111b
                     830                     
                     831             ;;o
                     832             ;db 10000011b
028E C1              833             db 11000001b
                     834             ;db 10111011b
028F DD              835             db 11011101b
                     836             ;db 10111011b
0290 DD              837             db 11011101b
                     838             ;db 10000011b
0291 C1              839             db 11000001b
                     840             ;db 11111111b   
0292 FF              841             db 11111111b
                     842             ;;space
                     843             ;db 11111111b   
0293 FF              844             db 11111111b
                     845                             ;;e
                     846             ;db 10111011b
0294 FF              847             db 11111111b
                     848             ;db 10101011b
0295 D5              849             db 11010101b
                     850             ;db 10101011b
0296 D5              851             db 11010101b
                     852             ;db 10000011b
0297 C1              853             db 11000001b
                     854             ;db 11111111b
0298 FF              855             db 11111111b
                     856                     
                     857             ;;m     
                     858             ;db 10000011b
0299 C1              859             db 11000001b    
                     860             ;db 11011111b
029A FB              861             db 11111011b
                     862             ;db 11101111b
029B F7              863             db 11110111b
                     864             ;db 11011111b
029C FB              865             db 11111011b
                     866             ;db 10000011b   
029D C1              867             db 11000001b
                     868             ;db 11111111b
029E FF              869             db 11111111b
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:13:44 PAGE    15

                     870             ;;a
                     871             ;db 11000011b 
029F C3              872             db 11000011b
                     873             ;db 10101111b
02A0 F5              874             db 11110101b
                     875             ;db 10101111b
02A1 F5              876             db 11110101b
                     877             ;db 11000011b
02A2 C3              878             db 11000011b
                     879             ;db 11111111b
02A3 FF              880             db 11111111b    
                     881     
                     882     ;;G
                     883             ;db 10100011b ;LSB does not matter 
02A4 C5              884             db 11000101b
                     885             ;db 10101011b
02A5 D5              886             db 11010101b
                     887             ;db 10111011b
02A6 DD              888             db 11011101b
                     889             ;db 10000011b
02A7 C1              890             db 11000001b
                     891     
                     892                     
                     893     
                     894     END
                             
                                     
                                             
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:13:44 PAGE    16

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

AC . . . . . . . .  B ADDR   00D0H.6 A   
ACC. . . . . . . .  D ADDR   00E0H   A   
ADCF . . . . . . .  D ADDR   00F6H   A   
ADCLK. . . . . . .  D ADDR   00F2H   A   
ADCON. . . . . . .  D ADDR   00F3H   A   
ADCVAL . . . . . .  D ADDR   005AH   A   
ADDH . . . . . . .  D ADDR   00F5H   A   
ADDL . . . . . . .  D ADDR   00F4H   A   
AFTERCOLLISION . .  C ADDR   0108H   A   
AFTERRANDOM. . . .  C ADDR   013FH   A   
AUXR . . . . . . .  D ADDR   008EH   A   
AUXR1. . . . . . .  D ADDR   00A2H   A   
B. . . . . . . . .  D ADDR   00F0H   A   
BLANKDISPLAY . . .  C ADDR   00D7H   A   
BLOCK0 . . . . . .  C ADDR   0238H   A   
BLOCK1 . . . . . .  C ADDR   0240H   A   
BLOCK2 . . . . . .  C ADDR   0248H   A   
BLOCK3 . . . . . .  C ADDR   0250H   A   
BLOCK4 . . . . . .  C ADDR   0258H   A   
BLOCK5 . . . . . .  C ADDR   0260H   A   
BLOCK6 . . . . . .  C ADDR   0268H   A   
BLOCK7 . . . . . .  C ADDR   0270H   A   
BLOCK8 . . . . . .  C ADDR   0278H   A   
BLOCKINDEX . . . .  D ADDR   0053H   A   
BLOCKITERATION . .  D ADDR   0057H   A   
BYTESPERBLOCK. . .  N NUMB   0008H   A   
BYTESPERROW. . . .  N NUMB   0005H   A   
CANBT1 . . . . . .  D ADDR   00B4H   A   
CANBT2 . . . . . .  D ADDR   00B5H   A   
CANBT3 . . . . . .  D ADDR   00B6H   A   
CANCONCH . . . . .  D ADDR   00B3H   A   
CANEN1 . . . . . .  D ADDR   00CEH   A   
CANEN2 . . . . . .  D ADDR   00CFH   A   
CANGCON. . . . . .  D ADDR   00ABH   A   
CANGIE . . . . . .  D ADDR   00C1H   A   
CANGIT . . . . . .  D ADDR   009BH   A   
CANGSTA. . . . . .  D ADDR   00AAH   A   
CANIDM1. . . . . .  D ADDR   00C4H   A   
CANIDM2. . . . . .  D ADDR   00C5H   A   
CANIDM3. . . . . .  D ADDR   00C6H   A   
CANIDM4. . . . . .  D ADDR   00C7H   A   
CANIDT1. . . . . .  D ADDR   00BCH   A   
CANIDT2. . . . . .  D ADDR   00BDH   A   
CANIDT3. . . . . .  D ADDR   00BEH   A   
CANIDT4. . . . . .  D ADDR   00BFH   A   
CANIE1 . . . . . .  D ADDR   00C2H   A   
CANIE2 . . . . . .  D ADDR   00C3H   A   
CANMSG . . . . . .  D ADDR   00A3H   A   
CANPAGE. . . . . .  D ADDR   00B1H   A   
CANREC . . . . . .  D ADDR   009DH   A   
CANSIT1. . . . . .  D ADDR   00BAH   A   
CANSIT2. . . . . .  D ADDR   00BBH   A   
CANSTCH. . . . . .  D ADDR   00B2H   A   
CANSTMPH . . . . .  D ADDR   00AFH   A   
CANSTMPL . . . . .  D ADDR   00AEH   A   
CANTCON. . . . . .  D ADDR   00A1H   A   
CANTEC . . . . . .  D ADDR   009CH   A   
CANTIMH. . . . . .  D ADDR   00ADH   A   
CANTIML. . . . . .  D ADDR   00ACH   A   
CANTTCH. . . . . .  D ADDR   00A5H   A   
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:13:44 PAGE    17

CANTTCL. . . . . .  D ADDR   00A4H   A   
CCAP0H . . . . . .  D ADDR   00FAH   A   
CCAP0L . . . . . .  D ADDR   00EAH   A   
CCAP1H . . . . . .  D ADDR   00FBH   A   
CCAP1L . . . . . .  D ADDR   00EBH   A   
CCAP2H . . . . . .  D ADDR   00FCH   A   
CCAP2L . . . . . .  D ADDR   00ECH   A   
CCAP3H . . . . . .  D ADDR   00FDH   A   
CCAP3L . . . . . .  D ADDR   00EDH   A   
CCAP4H . . . . . .  D ADDR   00FEH   A   
CCAP4L . . . . . .  D ADDR   00EEH   A   
CCAPM0 . . . . . .  D ADDR   00DAH   A   
CCAPM1 . . . . . .  D ADDR   00DBH   A   
CCAPM2 . . . . . .  D ADDR   00DCH   A   
CCAPM3 . . . . . .  D ADDR   00DDH   A   
CCAPM4 . . . . . .  D ADDR   00DEH   A   
CCF0 . . . . . . .  B ADDR   00D0H.0 A   
CCF1 . . . . . . .  B ADDR   00D0H.1 A   
CCF2 . . . . . . .  B ADDR   00D0H.2 A   
CCF3 . . . . . . .  B ADDR   00D0H.3 A   
CCF4 . . . . . . .  B ADDR   00D0H.4 A   
CCON . . . . . . .  D ADDR   00D8H   A   
CF . . . . . . . .  B ADDR   00D8H.7 A   
CH . . . . . . . .  D ADDR   00F9H   A   
CKCON. . . . . . .  D ADDR   008FH   A   
CL . . . . . . . .  D ADDR   00E9H   A   
CMOD . . . . . . .  D ADDR   00D9H   A   
CP_RL2 . . . . . .  B ADDR   00C8H.0 A   
CR . . . . . . . .  B ADDR   00D8H.6 A   
CURSOR . . . . . .  D ADDR   0054H   A   
CURSORBYTE . . . .  N NUMB   00FEH   A   
CURSORBYTEMASK . .  N NUMB   0001H   A   
CURSORLBL. . . . .  C ADDR   00E4H   A   
CY . . . . . . . .  B ADDR   00D0H.7 A   
C_T2 . . . . . . .  B ADDR   00C8H.1 A   
DEAD . . . . . . .  C ADDR   01A7H   A   
DELAY. . . . . . .  C ADDR   01E7H   A   
DETECTCOLLISION. .  C ADDR   0173H   A   
DISPCOLSHIFT . . .  C ADDR   01CFH   A   
DISPCOLSHIFTLOOP .  C ADDR   01D4H   A   
DISPROWSHIFT . . .  C ADDR   01E0H   A   
DPH. . . . . . . .  D ADDR   0083H   A   
DPL. . . . . . . .  D ADDR   0082H   A   
EA . . . . . . . .  B ADDR   00A8H.7 A   
EADC . . . . . . .  B ADDR   00E8H.1 A   
EC . . . . . . . .  B ADDR   00A8H.6 A   
ECAN . . . . . . .  B ADDR   00E8H.0 A   
EECON. . . . . . .  D ADDR   00D2H   A   
ES . . . . . . . .  B ADDR   00A8H.4 A   
ET0. . . . . . . .  B ADDR   00A8H.1 A   
ET1. . . . . . . .  B ADDR   00A8H.3 A   
ET2. . . . . . . .  B ADDR   00A8H.5 A   
ETIM . . . . . . .  B ADDR   00E8H.2 A   
EX0. . . . . . . .  B ADDR   00A8H.0 A   
EX1. . . . . . . .  B ADDR   00A8H.2 A   
EXEN2. . . . . . .  B ADDR   00C8H.3 A   
EXF2 . . . . . . .  B ADDR   00C8H.6 A   
F0 . . . . . . . .  B ADDR   00D0H.5 A   
FCON . . . . . . .  D ADDR   00D1H   A   
FE . . . . . . . .  B ADDR   0098H.7 A   
FPGACON. . . . . .  D ADDR   00F1H   A   
GAMEINIT . . . . .  C ADDR   01B3H   A   
GAMEOVERLOOP . . .  C ADDR   008CH   A   
GAMERESET. . . . .  C ADDR   01A9H   A   
GAME_OVER. . . . .  C ADDR   0280H   A   
IE0. . . . . . . .  B ADDR   0088H.1 A   
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:13:44 PAGE    18

IE1. . . . . . . .  B ADDR   0088H.3 A   
IEN0 . . . . . . .  D ADDR   00A8H   A   
IEN1 . . . . . . .  D ADDR   00E8H   A   
INIT . . . . . . .  C ADDR   0046H   A   
INT0 . . . . . . .  B ADDR   00B0H.2 A   
INT1 . . . . . . .  B ADDR   00B0H.3 A   
IPH0 . . . . . . .  D ADDR   00B7H   A   
IPH1 . . . . . . .  D ADDR   00F7H   A   
IPL0 . . . . . . .  D ADDR   00B8H   A   
IPL1 . . . . . . .  D ADDR   00F8H   A   
ISR_ADC. . . . . .  C ADDR   014AH   A   
ISR_TMR0 . . . . .  C ADDR   00ABH   A   
ISR_TMR1 . . . . .  C ADDR   0113H   A   
IT0. . . . . . . .  B ADDR   0088H.0 A   
IT1. . . . . . . .  B ADDR   0088H.2 A   
LFSR . . . . . . .  C ADDR   0200H   A   
LFSRSHIFT. . . . .  C ADDR   022BH   A   
LINEBYTES. . . . .  C ADDR   00C3H   A   
LOCATIONLBL. . . .  C ADDR   00F7H   A   
LOOP . . . . . . .  C ADDR   01EDH   A   
LOOP2. . . . . . .  C ADDR   01F5H   A   
LOOP3. . . . . . .  C ADDR   01FDH   A   
MAIN . . . . . . .  C ADDR   0075H   A   
NUMBEROFCOLLUMNS .  N NUMB   0028H   A   
NUMBEROFROWS . . .  N NUMB   0007H   A   
OV . . . . . . . .  B ADDR   00D0H.2 A   
P. . . . . . . . .  B ADDR   00D0H.0 A   
P0 . . . . . . . .  D ADDR   0080H   A   
P1 . . . . . . . .  D ADDR   0090H   A   
P2 . . . . . . . .  D ADDR   00A0H   A   
P3 . . . . . . . .  D ADDR   00B0H   A   
P4 . . . . . . . .  D ADDR   00C0H   A   
PCON . . . . . . .  D ADDR   0087H   A   
PSW. . . . . . . .  D ADDR   00D0H   A   
RAMINIT. . . . . .  C ADDR   01B7H   A   
RB8. . . . . . . .  B ADDR   0098H.2 A   
RCAP2H . . . . . .  D ADDR   00CBH   A   
RCAP2L . . . . . .  D ADDR   00CAH   A   
RCLK . . . . . . .  B ADDR   00C8H.5 A   
RD . . . . . . . .  B ADDR   00B0H.7 A   
REG. . . . . . . .  C ADDR   0167H   A   
REN. . . . . . . .  B ADDR   0098H.4 A   
RI . . . . . . . .  B ADDR   0098H.0 A   
ROWITERATION . . .  C ADDR   00C1H   A   
RS0. . . . . . . .  B ADDR   00D0H.3 A   
RS1. . . . . . . .  B ADDR   00D0H.4 A   
RXD. . . . . . . .  B ADDR   00B0H.0 A   
SADDR. . . . . . .  D ADDR   00A9H   A   
SADEN. . . . . . .  D ADDR   00B9H   A   
SBUF . . . . . . .  D ADDR   0099H   A   
SCON . . . . . . .  D ADDR   0098H   A   
SHIFTR6. . . . . .  C ADDR   0162H   A   
SM0. . . . . . . .  B ADDR   0098H.7 A   
SM1. . . . . . . .  B ADDR   0098H.6 A   
SM2. . . . . . . .  B ADDR   0098H.5 A   
SP . . . . . . . .  D ADDR   0081H   A   
T0 . . . . . . . .  B ADDR   00B0H.4 A   
T1 . . . . . . . .  B ADDR   00B0H.5 A   
T2CON. . . . . . .  D ADDR   00C8H   A   
T2MOD. . . . . . .  D ADDR   00C9H   A   
TB8. . . . . . . .  B ADDR   0098H.3 A   
TCLK . . . . . . .  B ADDR   00C8H.4 A   
TCON . . . . . . .  D ADDR   0088H   A   
TF0. . . . . . . .  B ADDR   0088H.5 A   
TF1. . . . . . . .  B ADDR   0088H.7 A   
TF2. . . . . . . .  B ADDR   00C8H.7 A   
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:13:44 PAGE    19

TH0. . . . . . . .  D ADDR   008CH   A   
TH1. . . . . . . .  D ADDR   008DH   A   
TH2. . . . . . . .  D ADDR   00CDH   A   
TI . . . . . . . .  B ADDR   0098H.1 A   
TL0. . . . . . . .  D ADDR   008AH   A   
TL1. . . . . . . .  D ADDR   008BH   A   
TL2. . . . . . . .  D ADDR   00CCH   A   
TMOD . . . . . . .  D ADDR   0089H   A   
TR0. . . . . . . .  B ADDR   0088H.4 A   
TR1. . . . . . . .  B ADDR   0088H.6 A   
TR2. . . . . . . .  B ADDR   00C8H.2 A   
TXD. . . . . . . .  B ADDR   00B0H.1 A   
VIDMEMEND. . . . .  N NUMB   0052H   A   
VIDMEMLENGTH . . .  N NUMB   0023H   A   
VIDMEMSTART. . . .  N NUMB   0030H   A   
WDTPRG . . . . . .  D ADDR   00A7H   A   
WDTRST . . . . . .  D ADDR   00A6H   A   
WR . . . . . . . .  B ADDR   00B0H.6 A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
