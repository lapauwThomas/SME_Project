A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:16:21 PAGE     1


MACRO ASSEMBLER A51 V8.02c
OBJECT MODULE PLACED IN .\Objects\main.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE main.a51 NOMOD51 SET(SMALL) DEBUG PRINT(.\Listings\main.lst) OBJECT(.\O
                      bjects\main.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     
                       2     ;*******************************************
                       3     ;* Sensors & Microsystem electronics       *
                       4     ;*                                         *
                       5     ;* Names: Steven Peters - Thomas Lapauw    *
                       6     ;*                                         *
                       7     ;*                Task 9                   *
                       8     ;*                                         *
                       9     ;*******************************************
                      10     
                      11     
                      12     ;Special register declarations
                      13     ;$include (t89c51cc01.inc)
                +1    14     ;*INC*************************************************************************
                +1    15     ; NAME: 89C51CC01.inc           
                +1    16     ;----------------------------------------------------------------------------
                +1    17     ; PURPOSE: for Keil
                +1    18     ;*****************************************************************************
                +1    19     
                +1    20     ;----------------------------------------
                +1    21     ; Include file for 8051 SFR Definitions  
                +1    22     ;----------------------------------------
                +1    23     
                +1    24     ;  BYTE Register 
  0080          +1    25     P0      DATA    80H
  0090          +1    26     P1      DATA    90H
  00A0          +1    27     P2      DATA    0A0H
                +1    28     
  00B0          +1    29     P3      DATA    0B0H
  00B7          +1    30     RD      BIT     0B7H
  00B6          +1    31     WR      BIT     0B6H
  00B5          +1    32     T1      BIT     0B5H
  00B4          +1    33     T0      BIT     0B4H
  00B3          +1    34     INT1    BIT     0B3H
  00B2          +1    35     INT0    BIT     0B2H
  00B1          +1    36     TXD     BIT     0B1H
  00B0          +1    37     RXD     BIT     0B0H
                +1    38     
  00C0          +1    39     P4      DATA    0C0H
                +1    40     
  00D0          +1    41     PSW     DATA    0D0H
  00D7          +1    42     CY      BIT     0D7H
  00D6          +1    43     AC      BIT     0D6H
  00D5          +1    44     F0      BIT     0D5H
  00D4          +1    45     RS1     BIT     0D4H
  00D3          +1    46     RS0     BIT     0D3H
  00D2          +1    47     OV      BIT     0D2H
  00D0          +1    48     P       BIT     0D0H
                +1    49     
  00E0          +1    50     ACC     DATA    0E0H
  00F0          +1    51     B       DATA    0F0H
  0081          +1    52     SP      DATA    81H
  0082          +1    53     DPL     DATA    82H
  0083          +1    54     DPH     DATA    83H
  0087          +1    55     PCON    DATA    87H
  008F          +1    56     CKCON   DATA    8FH
                +1    57     
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:16:21 PAGE     2

                +1    58     ;------------------ TIMERS registers ---------------------
  0088          +1    59     TCON    DATA    88H
  008F          +1    60     TF1     BIT     8FH
  008E          +1    61     TR1     BIT     8EH
  008D          +1    62     TF0     BIT     8DH
  008C          +1    63     TR0     BIT     8CH
  008B          +1    64     IE1     BIT     8BH
  008A          +1    65     IT1     BIT     8AH
  0089          +1    66     IE0     BIT     89H
  0088          +1    67     IT0     BIT     88H
                +1    68             
  0089          +1    69     TMOD    DATA    89H
                +1    70     
  00C8          +1    71     T2CON   DATA    0C8H
  00CF          +1    72     TF2     BIT     0CFH
  00CE          +1    73     EXF2    BIT     0CEH
  00CD          +1    74     RCLK    BIT     0CDH
  00CC          +1    75     TCLK    BIT     0CCH
  00CB          +1    76     EXEN2   BIT     0CBH
  00CA          +1    77     TR2     BIT     0CAH
  00C9          +1    78     C_T2    BIT     0C9H
  00C8          +1    79     CP_RL2  BIT     0C8H
                +1    80             
  00C9          +1    81     T2MOD   DATA    0C9H    
  008A          +1    82     TL0     DATA    8AH
  008B          +1    83     TL1     DATA    8BH
  00CC          +1    84     TL2     DATA    0CCH
  008C          +1    85     TH0     DATA    8CH
  008D          +1    86     TH1     DATA    8DH
  00CD          +1    87     TH2     DATA    0CDH    
  00CA          +1    88     RCAP2L  DATA    0CAH    
  00CB          +1    89     RCAP2H  DATA    0CBH    
  00A6          +1    90     WDTRST  DATA    0A6H    
  00A7          +1    91     WDTPRG  DATA    0A7H    
                +1    92     
                +1    93     
                +1    94     ;------------------- UART registers ------------------------
  0098          +1    95     SCON    DATA    98H
  009F          +1    96     SM0     BIT     9FH
  009F          +1    97     FE      BIT     9FH
  009E          +1    98     SM1     BIT     9EH
  009D          +1    99     SM2     BIT     9DH
  009C          +1   100     REN     BIT     9CH
  009B          +1   101     TB8     BIT     9BH
  009A          +1   102     RB8     BIT     9AH
  0099          +1   103     TI      BIT     99H
  0098          +1   104     RI      BIT     98H
                +1   105     
  0099          +1   106     SBUF    DATA    99H
  00B9          +1   107     SADEN   DATA    0B9H
  00A9          +1   108     SADDR   DATA    0A9H    
                +1   109     
                +1   110     ;-------------------- ADC registers ----------------------
  00F2          +1   111     ADCLK   DATA    0F2H    
  00F3          +1   112     ADCON   DATA    0F3H    
  00F4          +1   113     ADDL    DATA    0F4H    
  00F5          +1   114     ADDH    DATA    0F5H    
  00F6          +1   115     ADCF    DATA    0F6H    
                +1   116     
                +1   117     ;-------------------- FLASH EEPROM registers ------------
  00F1          +1   118     FPGACON  DATA   0F1H    
  00D1          +1   119     FCON    DATA    0D1H    
  00D2          +1   120     EECON   DATA    0D2H    
  008E          +1   121     AUXR    DATA    8EH
  00A2          +1   122     AUXR1   DATA    0A2H
                +1   123     
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:16:21 PAGE     3

                +1   124     ;-------------------- IT registers -----------------------
  00F8          +1   125     IPL1    DATA    0F8H    
  00F7          +1   126     IPH1    DATA    0F7H    
  00A8          +1   127     IEN0    DATA    0A8H    
  00B8          +1   128     IPL0    DATA    0B8H    
  00B7          +1   129     IPH0    DATA    0B7H    
  00E8          +1   130     IEN1    DATA    0E8H    
                +1   131     
                +1   132     ;  IEN0  
  00AF          +1   133     EA      BIT     0AFH
  00AE          +1   134     EC      BIT     0AEH
  00AD          +1   135     ET2     BIT     0ADH
  00AC          +1   136     ES      BIT     0ACH
  00AB          +1   137     ET1     BIT     0ABH
  00AA          +1   138     EX1     BIT     0AAH
  00A9          +1   139     ET0     BIT     0A9H
  00A8          +1   140     EX0     BIT     0A8H
                +1   141     
                +1   142     ;  IEN1 
  00EA          +1   143     ETIM    BIT     0EAH
  00E9          +1   144     EADC    BIT     0E9H
  00E8          +1   145     ECAN    BIT     0E8H
                +1   146     
                +1   147     ;--------------------- PCA registers --------------------
  00D8          +1   148     CCON    DATA    0D8H    
  00DF          +1   149     CF              BIT             0DFH
  00DE          +1   150     CR              BIT             0DEH
  00D4          +1   151     CCF4    BIT             0D4H
  00D3          +1   152     CCF3    BIT             0D3H
  00D2          +1   153     CCF2    BIT             0D2H
  00D1          +1   154     CCF1    BIT             0D1H
  00D0          +1   155     CCF0    BIT             0D0H
                +1   156     
  00D9          +1   157     CMOD    DATA    0D9H    
  00F9          +1   158     CH      DATA    0F9H    
  00E9          +1   159     CL      DATA    0E9H    
  00FA          +1   160     CCAP0H  DATA    0FAH    
  00EA          +1   161     CCAP0L  DATA    0EAH    
  00DA          +1   162     CCAPM0  DATA    0DAH    
  00FB          +1   163     CCAP1H  DATA    0FBH    
  00EB          +1   164     CCAP1L  DATA    0EBH    
  00DB          +1   165     CCAPM1  DATA    0DBH    
  00FC          +1   166     CCAP2H  DATA    0FCH    
  00EC          +1   167     CCAP2L  DATA    0ECH    
  00DC          +1   168     CCAPM2  DATA    0DCH    
  00FD          +1   169     CCAP3H  DATA    0FDH    
  00ED          +1   170     CCAP3L  DATA    0EDH    
  00DD          +1   171     CCAPM3  DATA    0DDH    
  00FE          +1   172     CCAP4H  DATA    0FEH    
  00EE          +1   173     CCAP4L  DATA    0EEH    
  00DE          +1   174     CCAPM4  DATA    0DEH    
                +1   175     
                +1   176     ;------------------- CAN registers --------------------------
  009B          +1   177     CANGIT          DATA    09BH
  009C          +1   178     CANTEC          DATA    09CH
  009D          +1   179     CANREC          DATA    09DH
  00A1          +1   180     CANTCON         DATA    0A1H    
  00A3          +1   181     CANMSG          DATA    0A3H    
  00A4          +1   182     CANTTCL         DATA    0A4H    
  00A5          +1   183     CANTTCH         DATA    0A5H    
  00AA          +1   184     CANGSTA         DATA    0AAH
  00AB          +1   185     CANGCON         DATA    0ABH
  00AC          +1   186     CANTIML         DATA    0ACH    
  00AD          +1   187     CANTIMH         DATA    0ADH    
  00AE          +1   188     CANSTMPL        DATA    0AEH    
  00AF          +1   189     CANSTMPH        DATA    0AFH
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:16:21 PAGE     4

  00B1          +1   190     CANPAGE         DATA    0B1H
  00B2          +1   191     CANSTCH         DATA    0B2H    
  00B3          +1   192     CANCONCH        DATA    0B3H    
  00B4          +1   193     CANBT1          DATA    0B4H
  00B5          +1   194     CANBT2          DATA    0B5H
  00B6          +1   195     CANBT3          DATA    0B6H
  00BA          +1   196     CANSIT1         DATA    0BAH
  00BB          +1   197     CANSIT2         DATA    0BBH    
  00BC          +1   198     CANIDT1         DATA    0BCH
  00BD          +1   199     CANIDT2         DATA    0BDH    
  00BE          +1   200     CANIDT3         DATA    0BEH    
  00BF          +1   201     CANIDT4         DATA    0BFH    
  00C1          +1   202     CANGIE          DATA    0C1H
  00C2          +1   203     CANIE1          DATA    0C2H    
  00C3          +1   204     CANIE2          DATA    0C3H
  00C4          +1   205     CANIDM1         DATA    0C4H
  00C5          +1   206     CANIDM2         DATA    0C5H
  00C6          +1   207     CANIDM3         DATA    0C6H
  00C7          +1   208     CANIDM4         DATA    0C7H
  00CE          +1   209     CANEN1          DATA    0CEH
  00CF          +1   210     CANEN2          DATA    0CFH
                +1   211     
                +1   212     
                     213     
                     214     
----                 215     DSEG AT 30h
                     216     
  0054               217             cursor DATA 54h
  0053               218             blockIndex DATA 53h
  0057               219             blockIteration DATA 57h
  005A               220             ADCVal DATA 5Ah
----                 221     CSEG    
                     222     ;Boot code
0000                 223     ORG 0000h
0000 020046          224     LJMP init 
                     225     
                     226     ;Interrupt address vectors
000B                 227     ORG 000Bh
000B 020086          228     LJMP ISR_tmr0
                     229     
001B                 230     ORG 001Bh
001B 0200F0          231     LJMP ISR_tmr1
                     232     
0043                 233     ORG 0043h
0043 020127          234     LJMP ISR_ADC
                     235     
                     236     
                     237     
                     238     
                     239     ;Address declarations
  0030               240     vidMemStart EQU 030h
  0052               241     vidMemEnd EQU 052h
  0023               242     vidMemLength EQU 35
                     243     
  0028               244     numberOfCollumns EQU 40
  0007               245     numberOfRows EQU 7
  0005               246     bytesPerRow EQU 5
                     247             
  0008               248     bytesPerBlock EQU 8
                     249             
  00FE               250     cursorByte EQU 11111110b
  0001               251     cursorByteMask EQU 00000001b
                     252     
                     253     ;Initialization code
0046                 254     init:   
                     255     
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:16:21 PAGE     5

                     256     ;**************** Init Timers **********************************
0046 758911          257                             MOV TMOD,#00010001b ;config tmr0 & tmr1 in 16bit mode
0049 758CFF          258                             MOV TH0,#0FFh ;tmr0 MSB
004C 758AFF          259                             MOV TL0,#0FFh ;tmr0 LSB
                     260                             
004F 758DFF          261                             MOV TH1,#0FFh ;tmr0 MSB
0052 758BFF          262                             MOV TL1,#0FFh ;tmr0 LSB
                     263                             
0055 D2AB            264                             SETB ET1
0057 D2A9            265                             SETB ET0 ;enable interrupt of tmr0
                     266     
                     267     
0059 758170          268                             MOV SP, #70h ; move stackpointer above registers
                     269                              
                     270                              
005C 12019E          271             LCALL gameInit
                     272     
                     273     ;*********************** ADC CONFIG ***********************************************
                     274             ; Setup for the ADC
005F 75F6FF          275             MOV ADCF,#0FFh ;enable the adc...
0062 D2E9            276             SETB EADC
0064 75F32F          277             MOV ADCON, #00101111b ; set P1.0 as ADC input
0067 755A60          278             MOV ADCVal,#01100000b
                     279     
                     280             
                     281     ;************* end of init: enable timers *********************
                     282     
006A D28C            283     SETB TR0 ;run tmr0
006C D28E            284     SETB TR1
006E D2AF            285     SETB EA ;global interrupt enable
                     286     
0070 C2A3            287     CLR P2.3 ;led to see if code is running
0072 020075          288     LJMP main
                     289     
                     290                             
                     291     ;*********************************Main program***************************************
0075                 292     main:           
                     293     ;does except update the random numbers actually everything happens timer based since the up
                             dating of either one is mutually exclusive, 
                     294     ;no interrupt may happen while they are busy
0075 1201EA          295             LCALL LFSR ; update random value
0078 3059FA          296             JNB 59h, main ; if not game over go back to main
007B 120222          297             LCALL keyboardScan ; wait for button 7 is pressed
007E 12019E          298             LCALL gameInit ;re init the game
0081 C259            299             CLR 59h  ;set state in running game
0083 020075          300             LJMP main
                     301                     
                     302     ;******************************* Interrupt handlers *********************************
                     303     
                     304     ; This timer refreshes the screen at a fast enough rate
                     305     ; it gets the data from the ram and shifts it onto the display.
                     306     ; based on the value of the ADC it also shows the cursor on the correct location.  
0086                 307     ISR_tmr0: 
0086 C2AF            308                             CLR EA ;global interrupt disable since the video memory may not be 
                             updated while the screen is updated
0088 C28C            309                             CLR TR0 ;stop tmr0
008A C28E            310                             CLR TR1
                     311                             
                     312                             ;reload timer0
008C 758CD0          313                             MOV TH0,#0D0h ;tmr0 MSB
008F 758A00          314                             MOV TL0,#000h ;tmr0 LSB
                     315                             
                     316     ;DISPLAY PART
0092 C2D4            317                     CLR RS1 ;move to registerbank 08h to 0Fh to prevent overwriting of register
                             s
0094 D2D3            318                     SETB RS0
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:16:21 PAGE     6

                     319                     
                     320             ;This parts displays the game background on the screen from ram
0096 7907            321                     MOV R1, #numberOfRows ;counting register to 8 for rows
0098 7A7F            322                     MOV R2, #01111111b ;data rows (msb = 0, others are 1) single bit zero, to e
                             nable current row
009A 7830            323                     MOV R0, #vidMemStart ; starting adress disp mem
009C                 324     rowIteration:
                     325     
009C 7F05            326                             MOV R7, #bytesPerRow ; counter for 5 bytes of row data
009E                 327     lineBytes:
009E E6              328                             MOV A,@R0 ; get data from ram starting at the lowest address
009F FE              329                             MOV R6,A ; move data to R6 to shift it into the screen
00A0 313F            330                             acall shiftR6 ; shift byte into screen
00A2 08              331                             INC R0 ; increase address by one for next byte to put onto the scre
                             en
00A3 DFF9            332                             DJNZ R7,lineBytes ; rinse and repeat for the full row
                     333                             
                     334                             ;shift R2 with the current row enabled in the register
00A5 EA              335                             MOV A,R2
00A6 FE              336                             MOV R6, A
00A7 313F            337                             Acall shiftR6 ; shift column data byte into SR
00A9 D2B2            338                             SETB P3.2 ; cycle store clock
00AB C2B2            339                             CLR P3.2
                     340     
                     341                             ;rotate row bit to enable next row
00AD EA              342                             MOV A, R2 
00AE 03              343                             RR A
00AF FA              344                             MOV R2,A
                     345                              ; repeat until 7 rows done
00B0 D9EA            346                             DJNZ R1, rowIteration
                     347     
                     348     
00B2 7906            349                             MOV R1, #06
00B4                 350     blankDisplay:                    ;loop to approximate the timing of the other rows to have 
                             similar brightness
00B4 7EFF            351                             MOV R6, #0FFh
00B6 313F            352                             Acall shiftR6 ; shift collumn data byte into SR
00B8 D9FA            353                             DJNZ R1,blankDisplay
                     354                             
00BA D2B2            355                             SETB P3.2 ; cycle store clock
00BC C2B2            356                             CLR P3.2
                     357                             
00BE 205924          358                             JB 59h,afterCollision ; if gameover skip the cursor
                     359             ;This part displays the cursor, making use of the duty cycle of the previous displa
                             y part over the timerperiod,
                     360             ;the bringhtness of the cursor can be controlled
                     361             
00C1 7904            362                             MOV R1, #04  ;the first 4 bytes that are shifted into the register 
                             puts all those leds off
00C3                 363     cursorLbl:                       ;loop to approximate the timing of the other rows to have 
                             similar brightness
00C3 7EFF            364                             MOV R6, #0FFh
00C5 313F            365                             Acall shiftR6 ; shift collumn data byte into SR
00C7 D9FA            366                             DJNZ R1,cursorLbl
                     367                             
00C9 7EFE            368                             MOV R6, #cursorByte ;shift this byte into the shift registers to en
                             able a led in the eight row of the display to be matched with the cursor location
00CB 313F            369                             Acall shiftR6 ; shift collumn data byte into SR
                     370                             
00CD E55A            371                             MOV A,ADCVal ;get the last updated value of the adc to A
00CF 75F025          372                             MOV B,#37 
00D2 84              373                             DIV AB ;divide the ADC value to get a value between 0 and 6 to for 
                             the cursor position
00D3 FE              374                             MOV R6, A ;stockate in R6
00D4 74FD            375                             MOV A,#11111101b ;A single pixel for the row enable
                     376     
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:16:21 PAGE     7

00D6                 377             locationLbl:
00D6 23              378                             RL A
00D7 DEFD            379                             DJNZ R6,locationLbl  ;rotate cursor data equal to location previous
                             ly calculated
                     380                             
00D9 F554            381                             MOV cursor,A
00DB FE              382                             MOV R6,A ; move cursor data to R6 for shift
                     383                             
00DC 313F            384                             Acall shiftR6 ; shift cursor position data byte into SR for row ena
                             ble
00DE D2B2            385                             SETB P3.2 ; cycle store clock
00E0 C2B2            386                             CLR P3.2
                     387                             
                     388                             
00E2 120150          389                             LCALL detectCollision ; check if a collision with the background ha
                             ppened with the current cursor position 
00E5                 390                             afterCollision:
                     391     
00E5 C2D4            392                             CLR RS1 ;move to registerbank 00h to 08h
00E7 C2D3            393                             CLR RS0 
                     394                             ;reenable timers
00E9 D28C            395                             SETB TR0 ;run tmr0
00EB D28E            396                             SETB TR1
00ED D2AF            397                             SETB EA ;global interrupt disable
                     398                             
00EF 32              399                             RETI
                     400     
                     401     ;************************** This timers updates the background of the game ****************
                             ******************
00F0                 402     ISR_tmr1:
                     403     ;DISPLAY PART
00F0 C28C            404                     CLR TR0 ;stop timer during buffer update
00F2 C28E            405                     CLR TR1 ;stop timer during buffer update
00F4 C2AF            406                     CLR EA ;global interrupt disable
                     407                     
                     408                     ;reload timers
00F6 758D00          409                     MOV TH1,#00h ;tmr0 MSB
00F9 758B00          410                     MOV TL1,#00h ;tmr0 LSB
                     411                     
00FC C0E0            412                     push Acc
00FE 20591B          413                     JB 59h,afterRandom
                     414                     ;get the current block index from ram
0101 E553            415                     MOV A, blockIndex
0103 90022B          416                     MOV DPTR, #block0               ; start at block0 and count from there
0106 93              417                     MOVC A,@A+DPTR
0107 FF              418                     MOV R7,A ; stockate data in R7 for collumnshift function
0108 1201BC          419                     LCALL dispColShift ; shift the new collumn in
                     420                     
010B E553            421                     MOV A, blockIndex ; retrieve current data offset
010D 04              422                     INC A; advance one adress
010E F553            423                     MOV blockIndex, A ; save current adress
                     424                     
0110 AB57            425                     MOV R3, blockIteration ;get current iteration from address this counts the 
                             number of collumns from a certain block that have already been shifted
                     426                     
0112 DB08            427                     DJNZ R3, afterRandom ; if the last collumn of the block is not updated jump
                              over the generation of the next block
                     428                     
0114 7B08            429                     MOV R3,#bytesPerBlock ; repeat 4 times
0116 E518            430                     MOV A,18h ; get data from MSB LFSR
0118 5438            431                     ANL A,#0111000b ;mask for the number of blocks  instead of dividing, this k
                             eeps 8 possible values for the 8 blocks,
                     432                                                     ;with a distance of 8 from each other match
                             ing the number of collumns of a block
011A F553            433                     MOV blockIndex, A ; save current adress for next block
                     434     
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:16:21 PAGE     8

011C                 435             afterRandom:
011C 8B57            436                     MOV blockIteration,R3 ;this saves the current shifted collumn count of a bl
                             ock in ram 
                     437                     ;pop A and restart timers
011E D0E0            438                     pop Acc
0120 D28E            439                     SETB TR1 
0122 D28C            440                     SETB TR0
0124 D2AF            441                     SETB EA
                     442     
0126 32              443     reti
                     444     
                     445     
                     446     ;*********************** This interrupt updates the value from the ADC ********************
                             **************
0127                 447     ISR_ADC:
                     448     
0127 C28C            449                     CLR TR0 ;stop timer during buffer update
0129 C28E            450                     CLR TR1 ;stop timer during buffer update
012B C2AF            451                     CLR EA ;global interrupt disable
                     452                     
012D C0E0            453     push Acc
012F E5F5            454             MOV A, ADDH ;get the highest 8 bits, low resolution is not needed,
0131 F55A            455             MOV ADCVal,A ; move the value to ram
0133 75F32F          456             MOV ADCON, #00101111b ; set P1.0 as ADC input, restart conversion
0136 D0E0            457     pop Acc
                     458     
0138 D28E            459                     SETB TR1 ;stop timer during buffer update
013A D28C            460                     SETB TR0
013C D2AF            461                     SETB EA
013E 32              462     reti
                     463     
                     464     
                     465     ;******************************************************************************************
                             ************
                     466     ;********************************* HELPER FUNCTIONS ***************************************
                             **********
                     467     ;******************************************************************************************
                             **********
                     468     
                     469     
                     470     ;**************************$ This function shifts the byte stockated in R6 into the shiftre
                             gisters connected to P4.1****************************************
013F                 471     shiftR6:
013F C0E0            472                                     push Acc
0141 EE              473                                     MOV A, R6  ; move the value to A
0142 7E08            474                                     MOV R6, #08 ;counting register to 8
0144                 475                                     Reg:
0144 13              476                                     RRC A ;rotate accumulator troug carre to get the the LSB in
                             to the carry
0145 92C1            477                                     MOV P4.1,C ;carry to the data pin
0147 D2C0            478                                     SETB P4.0 ; cycle serial clock
0149 C2C0            479                                     CLR P4.0
014B DEF7            480                                     DJNZ R6,Reg ;if 8 bits are shifted go further otherwise rep
                             eat
014D D0E0            481                                     pop Acc
014F 22              482                                     ret
                     483     
                     484     ;**************************$ This function detects the collisions of the cursor with the ba
                             ckground blocks **************************************************
0150                 485     detectCollision:
                     486     
                     487     ; this moves the eight collumn of the display data into a single byte to be matched with th
                             e cursor position
0150 E534            488             MOV A,34h ;get the byte of the first row
0152 13              489             RRC A ;shift the LSB into the carry, this matches the eight collumn of that row.
0153 9267            490             MOV 67h,C ;stockate C in the MSB of the collumn
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:16:21 PAGE     9

                     491             
0155 E539            492             MOV A,39h ;second row
0157 13              493             RRC A
0158 9266            494             MOV 66h,C ;C to MSB-1
                     495             
015A E53E            496             MOV A,3Eh
015C 13              497             RRC A
015D 9265            498             MOV 65h,C
                     499             
015F E543            500             MOV A,43h
0161 13              501             RRC A
0162 9264            502             MOV 64h,C
                     503             
0164 E548            504             MOV A,48h
0166 13              505             RRC A
0167 9263            506             MOV 63h,C
                     507             
0169 E54D            508             MOV A,4Dh
016B 13              509             RRC A
016C 9262            510             MOV 62h,C
                     511             
016E E552            512             MOV A,52h ; seventh row, to LSB + 1
0170 13              513             RRC A
0171 9261            514             MOV 61h,C
                     515     
                     516             ;CLR 60h ; clear the LSB 
                     517             
0173 E52C            518             MOV A,2Ch ;move the constructed byte to A
0175 F4              519             CPL A ; complement it because all the 0 represent walls
0176 F52C            520             MOV 2Ch,A ; move it back
                     521     
0178 E554            522             MOV A,cursor ; get the cursor data
017A F4              523             CPL A ; complement it since the 0 is where the cursor is, all others should be 1
017B 54FE            524             ANL A,#11111110b ; mask it so possible residual data on the invisible eight row doe
                             s not influence the detection
017D 552C            525             ANL A,2Ch ; And the cursor positon in A with the eight collumn of the screen
                     526                               ; if the cursor is on the same location as a lit pixel (obstackle
                             /wall) the AND will produce a 1 on a certain position
                     527             
017F 7001            528             JNZ dead ; if the AND action is !=0 a collision is detected , then jump to the dead
                              routine
                     529     
0181 22              530             ret
                     531             
                     532     ;***************** This routine is executed when a collision is detected ******************
                             **
0182                 533     dead:
                     534     
                     535     ; this clear the game field in ram
                     536     ;MOV R0,#numberOfCollumns
                     537     ;gameReset:
                     538                     ;MOV R7,#0FFh ; stockate data in R7 for collumnshift
                     539                     ;LCALL dispColShift
                     540                     ;DJNZ R0, gameReset
0182 C2D4            541             CLR RS1 ;move to registerbank 00h to 08h
0184 C2D3            542             CLR RS0 
                     543                             
0186 7827            544             MOV R0,#39
0188 7900            545             MOV R1,#0
018A 900273          546             MOV DPTR,#game_over ;this pushes the game over message to the RAM
018D                 547     gameOverLoop:
018D E8              548             MOV A,R0
018E 93              549             MOVC A,@A+DPTR
018F FF              550             MOV R7,A
0190 1201BC          551             LCALL dispColShift
0193 D8F8            552             DJNZ R0,gameOverLoop
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:16:21 PAGE    10

0195 E8              553             MOV A,R0
0196 93              554             MOVC A,@A+DPTR
0197 FF              555             MOV R7,A
0198 1201BC          556             LCALL dispColShift
                     557     
019B D259            558     SETB 59h ;set game over state
019D 22              559     ret ;return to caller (ISR_tmr0)
                     560     
                     561     
019E                 562     gameInit:
                     563     ;***************** Initialize ram to all ones (all leds off)*******************************
                                           
019E 7830            564                             MOV R0,#vidMemStart 
01A0 7928            565                             MOV R1,#numberOfCollumns
01A2                 566     ramInit:
01A2 76FF            567                             MOV @R0,#0FFh
01A4 08              568                             INC R0
01A5 D9FB            569                             DJNZ R1,ramInit
                     570                             
                     571     ;***************** Init the game logic  *************************
01A7 75186A          572     MOV 18h, #1101010b 
                     573     
01AA 7B08            574     MOV R3,#bytesPerBlock ; repeat 4 times
01AC E518            575     MOV A,18h ; get data from MSB LFSR
01AE 5438            576     ANL A,#0111000b ;mask for the number of blocks          
01B0 F553            577     MOV blockIndex, A ; save current adress for next block
01B2 1201EA          578     LCALL LFSR  ; generate new random data
01B5 B2A4            579     CPL P2.4 ; toggle led to see if working
01B7 8B57            580     MOV blockIteration,R3
01B9 C259            581     CLR 59h ; set game as running
01BB 22              582     ret
                     583     
                     584     
                     585     ;*************************** This function shifts a collumn in the game to make it go forwa
                             rd *******************
                     586     
                     587     ;shift 7 MSB in framebuffer
01BC                 588     dispColShift:
01BC EF              589             MOV A, R7 ; move the collumn that needs to be shifted in from R7 into A
01BD 7D07            590             MOV     R5, #numberOfRows ;counter to count rows 
01BF 7930            591             MOV R1, #vidMemStart ; start at lowest address to increase each time
01C1                 592     dispColShiftLoop: ; this part is looped
01C1 13              593             RRC A ;Rotate LSB in carry to shift into the row
01C2 7E05            594             MOV     R6, #bytesPerRow ; counter to rotate 5 horizontal bytes will be used in dis
                             pRowShift to count the progress
                     595             
01C4 C0E0            596             PUSH ACC ; push acc to save current data of A
                     597             
01C6                 598     dispRowShift: ; this rotates the carry into the current memory address
01C6 E7              599             MOV A,@R1 ;start at the current addres and move it from RAM into A
01C7 33              600             RLC A ;rotate the carry into the LSB of the current byte, the LSB comes into the th
                             e carry 
01C8 F7              601             MOV @R1,A ;move the updated byte back into ram
01C9 09              602             INC R1   ;increase for the next byte
01CA DEFA            603             DJNZ R6, dispRowShift ; do this until the current row is updated. The carry becomes
                              the LSB, the MSB becomes the carry to become the LSB of the next byte
                     604             
01CC D0E0            605             POP ACC ;pop the accumulator
01CE DDF1            606             DJNZ R5, dispColShiftLoop ; repeat until all rows are shifted
01D0 22              607             RET
                     608     
                     609             
                     610     ;rudimentary delay for test purposes
01D1                 611     delay:   
01D1 7D0F            612                     MOV R5, #0Fh
01D3 1201D7          613                     LCALL loop
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:16:21 PAGE    11

01D6 22              614                     RET
                     615     
01D7                 616     loop:   
01D7 7E00            617                     MOV R6, #00h
01D9 1201DF          618                     LCALL loop2
01DC DDF9            619                     DJNZ R5, loop
01DE 22              620                     RET
01DF                 621     loop2:  
01DF 7F00            622                     MOV R7, #00h
01E1 1201E7          623                     LCALL loop3
01E4 DEF9            624                     DJNZ R6, loop2
01E6 22              625                     RET
                     626                     
01E7 DFFE            627     loop3:  DJNZ R7,loop3
01E9 22              628                     RET
                     629                     
                     630     ;**********************************************************************************        
                                  
                     631     ;random number generator code trough LFSR               
01EA                 632     LFSR: 
01EA D2D4            633             SETB RS1 ;move to registerbank 08h to 0Fh
01EC D2D3            634             SETB RS0
01EE E8              635             MOV A,R0 ;Save highest byte to address
01EF FC              636             MOV R4,A
01F0 120215          637             lcall LFSRShift
01F3 120215          638             lcall LFSRShift
01F6 6C              639             XRL A,R4
01F7 FC              640             MOV R4,A
01F8 120215          641             lcall LFSRShift
01FB 120215          642             lcall LFSRShift
01FE 120215          643             lcall LFSRShift
0201 120215          644             lcall LFSRShift
0204 6C              645             XRL A,R4
0205 FC              646             MOV R4,A                
0206 120215          647             lcall LFSRShift
0209 6C              648             XRL A,R4
020A FC              649             MOV R4,A
020B 120215          650             lcall LFSRShift
020E EC              651             MOV A,R4
020F FB              652             MOV R3,A
                     653             
0210 C2D4            654             CLR RS1 ;move to registerbank 08h to 0Fh
0212 C2D3            655             CLR RS0
                     656             
0214 22              657             RET
                     658             
                     659     ;shift the 32 bit registers of the LFSR
0215                 660     LFSRShift: 
0215 EB              661             MOV A,R3 ; rotate shift register
0216 33              662             RLC A
0217 FB              663             MOV R3,A
0218 EA              664             MOV A,R2 ; rotate shift register
0219 33              665             RLC A
021A FA              666             MOV R2,A
021B E9              667             MOV A,R1 ; rotate shift register
021C 33              668             RLC A
021D F9              669             MOV R1,A
021E E8              670             MOV A,R0 ; rotate shift register
021F 33              671             RLC A
0220 F8              672             MOV R0,A
0221 22              673             ret     
                     674     
                     675     ;function to scan the keyboard, jumps to itself if button 7 is not pressed, blocks the code
                              from advancing until button 7 is pressed.
0222                 676     keyboardScan:   
0222 7580FF          677                             Mov P0, #0FFh ;set all to 1
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:16:21 PAGE    12

0225 C287            678                             CLR P0.7  ; set top row to zero
0227 2083F8          679                             JB  P0.3, keyboardScan ; if button 7 is high, button is not pressed
022A 22              680                             ret ; if P0.3 is not set button 7 is pressed, and return to continu
                             e code.
                     681             
                     682     
                     683     ;******************************************************************************************
                             ***********************
                     684     ;************************************* DIRECT BYTES IN CODE MEMORY ************************
                             **********************
                     685     ;******************************************************************************************
                             ********************$
                     686     
                     687     ;*********************** These are the obstackle blocks ***********************************
                             ****************
022B                 688             block0:
022B 3E              689             db 0x3e
022C 3E              690             db 0x3e
022D 3E              691             db 0x3e
022E 3E              692             db 0x3e
022F 3E              693             db 0x3e
0230 3E              694             db 0x3e
0231 3E              695             db 0x3e
0232 3E              696             db 0x3e
                     697             
                     698             
0233                 699             block1:
                     700             
0233 3E              701             db 0x3e
0234 3E              702             db 0x3e
0235 3E              703             db 0x3e
0236 1C              704             db 0x1C
0237 1C              705             db 0x1C
0238 1C              706             db 0x1C
0239 3E              707             db 0x3e
023A 3E              708             db 0x3e
                     709             
023B                 710             block2:
                     711             
023B 3E              712             db 0x3e
023C 3E              713             db 0x3e
023D 3E              714             db 0x3e
023E 38              715             db 0x38
023F 38              716             db 0x38
0240 38              717             db 0x38
0241 3E              718             db 0x3e
0242 3E              719             db 0x3e
                     720                     
0243                 721             block3:
                     722             
0243 3E              723             db 0x3e
0244 3E              724             db 0x3e
0245 3E              725             db 0x3e
0246 18              726             db 0x18
0247 18              727             db 0x18
0248 18              728             db 0x18
0249 3E              729             db 0x3e
024A 3E              730             db 0x3e
                     731                     
024B                 732             block4:
                     733             
024B 3E              734             db 0x3e
024C 3E              735             db 0x3e
024D 3E              736             db 0x3e
024E 06              737             db 0x06
024F 06              738             db 0x06
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:16:21 PAGE    13

0250 3E              739             db 0x3e
0251 3E              740             db 0x3e
0252 3E              741             db 0x3e
                     742             
0253                 743             block5:
0253 3E              744             db 0x3e
0254 3E              745             db 0x3e
0255 3E              746             db 0x3e
0256 08              747             db 0x08
0257 08              748             db 0x08
0258 3E              749             db 0x3e
0259 3E              750             db 0x3e
025A 3E              751             db 0x3e
                     752                     
025B                 753             block6:
                     754             
025B 3E              755             db 0x3e
025C 3E              756             db 0x3e
025D 3E              757             db 0x3e
025E 32              758             db 0x32
025F 32              759             db 0x32
0260 3E              760             db 0x3e
0261 3E              761             db 0x3e
0262 3E              762             db 0x3e
                     763                     
0263                 764             block7:
0263 3E              765             db 0x3e
0264 3E              766             db 0x3e
0265 3E              767             db 0x3e
0266 26              768             db 0x26
0267 26              769             db 0x26
0268 3E              770             db 0x3e
0269 3E              771             db 0x3e
026A 3E              772             db 0x3e
                     773                     
026B                 774             block8:
026B 3E              775             db 0x3e
026C 3E              776             db 0x3e
026D 3E              777             db 0x3e
026E 26              778             db 0x26
026F 26              779             db 0x26
0270 3E              780             db 0x3e
0271 3E              781             db 0x3e
0272 3E              782             db 0x3e
                     783                     
                     784     ;Letters for the game over message
0273                 785     game_over:
                     786     
                     787             ;;r
0273 CB              788             db 11001011b
0274 F5              789             db 11110101b
0275 F5              790             db 11110101b
0276 C1              791             db 11000001b
                     792             ;;e
0277 FF              793             db 11111111b
0278 D5              794             db 11010101b
0279 D5              795             db 11010101b
027A C1              796             db 11000001b
027B FF              797             db 11111111b
                     798             
                     799             ;;v
027C E1              800             db 11100001b
027D DF              801             db 11011111b
027E DF              802             db 11011111b
027F E1              803             db 11100001b
0280 FF              804             db 11111111b
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:16:21 PAGE    14

                     805                     
                     806             ;;o
0281 C1              807             db 11000001b
0282 DD              808             db 11011101b
0283 DD              809             db 11011101b
0284 C1              810             db 11000001b
0285 FF              811             db 11111111b
                     812                     
                     813             ;;space
0286 FF              814             db 11111111b
                     815             
                     816             ;;e
0287 FF              817             db 11111111b
0288 D5              818             db 11010101b
0289 D5              819             db 11010101b
028A C1              820             db 11000001b
028B FF              821             db 11111111b
                     822                     
                     823             ;;m     
028C C1              824             db 11000001b    
028D FB              825             db 11111011b
028E F7              826             db 11110111b
028F FB              827             db 11111011b
0290 C1              828             db 11000001b
0291 FF              829             db 11111111b
                     830                     
                     831             ;;a
0292 C3              832             db 11000011b
0293 F5              833             db 11110101b
0294 F5              834             db 11110101b
0295 C3              835             db 11000011b
0296 FF              836             db 11111111b    
                     837     
                     838             ;;G
0297 C5              839             db 11000101b
0298 D5              840             db 11010101b
0299 DD              841             db 11011101b
029A C1              842             db 11000001b
                     843     
                     844                     
                     845     
                     846     END
                             
                                     
                                             
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:16:21 PAGE    15

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

AC . . . . . . . .  B ADDR   00D0H.6 A   
ACC. . . . . . . .  D ADDR   00E0H   A   
ADCF . . . . . . .  D ADDR   00F6H   A   
ADCLK. . . . . . .  D ADDR   00F2H   A   
ADCON. . . . . . .  D ADDR   00F3H   A   
ADCVAL . . . . . .  D ADDR   005AH   A   
ADDH . . . . . . .  D ADDR   00F5H   A   
ADDL . . . . . . .  D ADDR   00F4H   A   
AFTERCOLLISION . .  C ADDR   00E5H   A   
AFTERRANDOM. . . .  C ADDR   011CH   A   
AUXR . . . . . . .  D ADDR   008EH   A   
AUXR1. . . . . . .  D ADDR   00A2H   A   
B. . . . . . . . .  D ADDR   00F0H   A   
BLANKDISPLAY . . .  C ADDR   00B4H   A   
BLOCK0 . . . . . .  C ADDR   022BH   A   
BLOCK1 . . . . . .  C ADDR   0233H   A   
BLOCK2 . . . . . .  C ADDR   023BH   A   
BLOCK3 . . . . . .  C ADDR   0243H   A   
BLOCK4 . . . . . .  C ADDR   024BH   A   
BLOCK5 . . . . . .  C ADDR   0253H   A   
BLOCK6 . . . . . .  C ADDR   025BH   A   
BLOCK7 . . . . . .  C ADDR   0263H   A   
BLOCK8 . . . . . .  C ADDR   026BH   A   
BLOCKINDEX . . . .  D ADDR   0053H   A   
BLOCKITERATION . .  D ADDR   0057H   A   
BYTESPERBLOCK. . .  N NUMB   0008H   A   
BYTESPERROW. . . .  N NUMB   0005H   A   
CANBT1 . . . . . .  D ADDR   00B4H   A   
CANBT2 . . . . . .  D ADDR   00B5H   A   
CANBT3 . . . . . .  D ADDR   00B6H   A   
CANCONCH . . . . .  D ADDR   00B3H   A   
CANEN1 . . . . . .  D ADDR   00CEH   A   
CANEN2 . . . . . .  D ADDR   00CFH   A   
CANGCON. . . . . .  D ADDR   00ABH   A   
CANGIE . . . . . .  D ADDR   00C1H   A   
CANGIT . . . . . .  D ADDR   009BH   A   
CANGSTA. . . . . .  D ADDR   00AAH   A   
CANIDM1. . . . . .  D ADDR   00C4H   A   
CANIDM2. . . . . .  D ADDR   00C5H   A   
CANIDM3. . . . . .  D ADDR   00C6H   A   
CANIDM4. . . . . .  D ADDR   00C7H   A   
CANIDT1. . . . . .  D ADDR   00BCH   A   
CANIDT2. . . . . .  D ADDR   00BDH   A   
CANIDT3. . . . . .  D ADDR   00BEH   A   
CANIDT4. . . . . .  D ADDR   00BFH   A   
CANIE1 . . . . . .  D ADDR   00C2H   A   
CANIE2 . . . . . .  D ADDR   00C3H   A   
CANMSG . . . . . .  D ADDR   00A3H   A   
CANPAGE. . . . . .  D ADDR   00B1H   A   
CANREC . . . . . .  D ADDR   009DH   A   
CANSIT1. . . . . .  D ADDR   00BAH   A   
CANSIT2. . . . . .  D ADDR   00BBH   A   
CANSTCH. . . . . .  D ADDR   00B2H   A   
CANSTMPH . . . . .  D ADDR   00AFH   A   
CANSTMPL . . . . .  D ADDR   00AEH   A   
CANTCON. . . . . .  D ADDR   00A1H   A   
CANTEC . . . . . .  D ADDR   009CH   A   
CANTIMH. . . . . .  D ADDR   00ADH   A   
CANTIML. . . . . .  D ADDR   00ACH   A   
CANTTCH. . . . . .  D ADDR   00A5H   A   
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:16:21 PAGE    16

CANTTCL. . . . . .  D ADDR   00A4H   A   
CCAP0H . . . . . .  D ADDR   00FAH   A   
CCAP0L . . . . . .  D ADDR   00EAH   A   
CCAP1H . . . . . .  D ADDR   00FBH   A   
CCAP1L . . . . . .  D ADDR   00EBH   A   
CCAP2H . . . . . .  D ADDR   00FCH   A   
CCAP2L . . . . . .  D ADDR   00ECH   A   
CCAP3H . . . . . .  D ADDR   00FDH   A   
CCAP3L . . . . . .  D ADDR   00EDH   A   
CCAP4H . . . . . .  D ADDR   00FEH   A   
CCAP4L . . . . . .  D ADDR   00EEH   A   
CCAPM0 . . . . . .  D ADDR   00DAH   A   
CCAPM1 . . . . . .  D ADDR   00DBH   A   
CCAPM2 . . . . . .  D ADDR   00DCH   A   
CCAPM3 . . . . . .  D ADDR   00DDH   A   
CCAPM4 . . . . . .  D ADDR   00DEH   A   
CCF0 . . . . . . .  B ADDR   00D0H.0 A   
CCF1 . . . . . . .  B ADDR   00D0H.1 A   
CCF2 . . . . . . .  B ADDR   00D0H.2 A   
CCF3 . . . . . . .  B ADDR   00D0H.3 A   
CCF4 . . . . . . .  B ADDR   00D0H.4 A   
CCON . . . . . . .  D ADDR   00D8H   A   
CF . . . . . . . .  B ADDR   00D8H.7 A   
CH . . . . . . . .  D ADDR   00F9H   A   
CKCON. . . . . . .  D ADDR   008FH   A   
CL . . . . . . . .  D ADDR   00E9H   A   
CMOD . . . . . . .  D ADDR   00D9H   A   
CP_RL2 . . . . . .  B ADDR   00C8H.0 A   
CR . . . . . . . .  B ADDR   00D8H.6 A   
CURSOR . . . . . .  D ADDR   0054H   A   
CURSORBYTE . . . .  N NUMB   00FEH   A   
CURSORBYTEMASK . .  N NUMB   0001H   A   
CURSORLBL. . . . .  C ADDR   00C3H   A   
CY . . . . . . . .  B ADDR   00D0H.7 A   
C_T2 . . . . . . .  B ADDR   00C8H.1 A   
DEAD . . . . . . .  C ADDR   0182H   A   
DELAY. . . . . . .  C ADDR   01D1H   A   
DETECTCOLLISION. .  C ADDR   0150H   A   
DISPCOLSHIFT . . .  C ADDR   01BCH   A   
DISPCOLSHIFTLOOP .  C ADDR   01C1H   A   
DISPROWSHIFT . . .  C ADDR   01C6H   A   
DPH. . . . . . . .  D ADDR   0083H   A   
DPL. . . . . . . .  D ADDR   0082H   A   
EA . . . . . . . .  B ADDR   00A8H.7 A   
EADC . . . . . . .  B ADDR   00E8H.1 A   
EC . . . . . . . .  B ADDR   00A8H.6 A   
ECAN . . . . . . .  B ADDR   00E8H.0 A   
EECON. . . . . . .  D ADDR   00D2H   A   
ES . . . . . . . .  B ADDR   00A8H.4 A   
ET0. . . . . . . .  B ADDR   00A8H.1 A   
ET1. . . . . . . .  B ADDR   00A8H.3 A   
ET2. . . . . . . .  B ADDR   00A8H.5 A   
ETIM . . . . . . .  B ADDR   00E8H.2 A   
EX0. . . . . . . .  B ADDR   00A8H.0 A   
EX1. . . . . . . .  B ADDR   00A8H.2 A   
EXEN2. . . . . . .  B ADDR   00C8H.3 A   
EXF2 . . . . . . .  B ADDR   00C8H.6 A   
F0 . . . . . . . .  B ADDR   00D0H.5 A   
FCON . . . . . . .  D ADDR   00D1H   A   
FE . . . . . . . .  B ADDR   0098H.7 A   
FPGACON. . . . . .  D ADDR   00F1H   A   
GAMEINIT . . . . .  C ADDR   019EH   A   
GAMEOVERLOOP . . .  C ADDR   018DH   A   
GAME_OVER. . . . .  C ADDR   0273H   A   
IE0. . . . . . . .  B ADDR   0088H.1 A   
IE1. . . . . . . .  B ADDR   0088H.3 A   
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:16:21 PAGE    17

IEN0 . . . . . . .  D ADDR   00A8H   A   
IEN1 . . . . . . .  D ADDR   00E8H   A   
INIT . . . . . . .  C ADDR   0046H   A   
INT0 . . . . . . .  B ADDR   00B0H.2 A   
INT1 . . . . . . .  B ADDR   00B0H.3 A   
IPH0 . . . . . . .  D ADDR   00B7H   A   
IPH1 . . . . . . .  D ADDR   00F7H   A   
IPL0 . . . . . . .  D ADDR   00B8H   A   
IPL1 . . . . . . .  D ADDR   00F8H   A   
ISR_ADC. . . . . .  C ADDR   0127H   A   
ISR_TMR0 . . . . .  C ADDR   0086H   A   
ISR_TMR1 . . . . .  C ADDR   00F0H   A   
IT0. . . . . . . .  B ADDR   0088H.0 A   
IT1. . . . . . . .  B ADDR   0088H.2 A   
KEYBOARDSCAN . . .  C ADDR   0222H   A   
LFSR . . . . . . .  C ADDR   01EAH   A   
LFSRSHIFT. . . . .  C ADDR   0215H   A   
LINEBYTES. . . . .  C ADDR   009EH   A   
LOCATIONLBL. . . .  C ADDR   00D6H   A   
LOOP . . . . . . .  C ADDR   01D7H   A   
LOOP2. . . . . . .  C ADDR   01DFH   A   
LOOP3. . . . . . .  C ADDR   01E7H   A   
MAIN . . . . . . .  C ADDR   0075H   A   
NUMBEROFCOLLUMNS .  N NUMB   0028H   A   
NUMBEROFROWS . . .  N NUMB   0007H   A   
OV . . . . . . . .  B ADDR   00D0H.2 A   
P. . . . . . . . .  B ADDR   00D0H.0 A   
P0 . . . . . . . .  D ADDR   0080H   A   
P1 . . . . . . . .  D ADDR   0090H   A   
P2 . . . . . . . .  D ADDR   00A0H   A   
P3 . . . . . . . .  D ADDR   00B0H   A   
P4 . . . . . . . .  D ADDR   00C0H   A   
PCON . . . . . . .  D ADDR   0087H   A   
PSW. . . . . . . .  D ADDR   00D0H   A   
RAMINIT. . . . . .  C ADDR   01A2H   A   
RB8. . . . . . . .  B ADDR   0098H.2 A   
RCAP2H . . . . . .  D ADDR   00CBH   A   
RCAP2L . . . . . .  D ADDR   00CAH   A   
RCLK . . . . . . .  B ADDR   00C8H.5 A   
RD . . . . . . . .  B ADDR   00B0H.7 A   
REG. . . . . . . .  C ADDR   0144H   A   
REN. . . . . . . .  B ADDR   0098H.4 A   
RI . . . . . . . .  B ADDR   0098H.0 A   
ROWITERATION . . .  C ADDR   009CH   A   
RS0. . . . . . . .  B ADDR   00D0H.3 A   
RS1. . . . . . . .  B ADDR   00D0H.4 A   
RXD. . . . . . . .  B ADDR   00B0H.0 A   
SADDR. . . . . . .  D ADDR   00A9H   A   
SADEN. . . . . . .  D ADDR   00B9H   A   
SBUF . . . . . . .  D ADDR   0099H   A   
SCON . . . . . . .  D ADDR   0098H   A   
SHIFTR6. . . . . .  C ADDR   013FH   A   
SM0. . . . . . . .  B ADDR   0098H.7 A   
SM1. . . . . . . .  B ADDR   0098H.6 A   
SM2. . . . . . . .  B ADDR   0098H.5 A   
SP . . . . . . . .  D ADDR   0081H   A   
T0 . . . . . . . .  B ADDR   00B0H.4 A   
T1 . . . . . . . .  B ADDR   00B0H.5 A   
T2CON. . . . . . .  D ADDR   00C8H   A   
T2MOD. . . . . . .  D ADDR   00C9H   A   
TB8. . . . . . . .  B ADDR   0098H.3 A   
TCLK . . . . . . .  B ADDR   00C8H.4 A   
TCON . . . . . . .  D ADDR   0088H   A   
TF0. . . . . . . .  B ADDR   0088H.5 A   
TF1. . . . . . . .  B ADDR   0088H.7 A   
TF2. . . . . . . .  B ADDR   00C8H.7 A   
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:16:21 PAGE    18

TH0. . . . . . . .  D ADDR   008CH   A   
TH1. . . . . . . .  D ADDR   008DH   A   
TH2. . . . . . . .  D ADDR   00CDH   A   
TI . . . . . . . .  B ADDR   0098H.1 A   
TL0. . . . . . . .  D ADDR   008AH   A   
TL1. . . . . . . .  D ADDR   008BH   A   
TL2. . . . . . . .  D ADDR   00CCH   A   
TMOD . . . . . . .  D ADDR   0089H   A   
TR0. . . . . . . .  B ADDR   0088H.4 A   
TR1. . . . . . . .  B ADDR   0088H.6 A   
TR2. . . . . . . .  B ADDR   00C8H.2 A   
TXD. . . . . . . .  B ADDR   00B0H.1 A   
VIDMEMEND. . . . .  N NUMB   0052H   A   
VIDMEMLENGTH . . .  N NUMB   0023H   A   
VIDMEMSTART. . . .  N NUMB   0030H   A   
WDTPRG . . . . . .  D ADDR   00A7H   A   
WDTRST . . . . . .  D ADDR   00A6H   A   
WR . . . . . . . .  B ADDR   00B0H.6 A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
