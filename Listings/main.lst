A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:03:35 PAGE     1


MACRO ASSEMBLER A51 V8.02c
OBJECT MODULE PLACED IN .\Objects\main.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE main.a51 NOMOD51 SET(SMALL) DEBUG PRINT(.\Listings\main.lst) OBJECT(.\O
                      bjects\main.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     
                       2     ;*******************************************
                       3     ;* Sensors & Microsystem electronics       *
                       4     ;*                                         *
                       5     ;* Names: Steven Peters - Thomas Lapauw    *
                       6     ;*                                         *
                       7     ;*                Task 9                   *
                       8     ;*                                         *
                       9     ;*******************************************
                      10     
                      11     
                      12     ;Special register declarations
                      13     ;$include (t89c51cc01.inc)
                +1    14     ;*INC*************************************************************************
                +1    15     ; NAME: 89C51CC01.inc           
                +1    16     ;----------------------------------------------------------------------------
                +1    17     ; PURPOSE: for Keil
                +1    18     ;*****************************************************************************
                +1    19     
                +1    20     ;----------------------------------------
                +1    21     ; Include file for 8051 SFR Definitions  
                +1    22     ;----------------------------------------
                +1    23     
                +1    24     ;  BYTE Register 
  0080          +1    25     P0      DATA    80H
  0090          +1    26     P1      DATA    90H
  00A0          +1    27     P2      DATA    0A0H
                +1    28     
  00B0          +1    29     P3      DATA    0B0H
  00B7          +1    30     RD      BIT     0B7H
  00B6          +1    31     WR      BIT     0B6H
  00B5          +1    32     T1      BIT     0B5H
  00B4          +1    33     T0      BIT     0B4H
  00B3          +1    34     INT1    BIT     0B3H
  00B2          +1    35     INT0    BIT     0B2H
  00B1          +1    36     TXD     BIT     0B1H
  00B0          +1    37     RXD     BIT     0B0H
                +1    38     
  00C0          +1    39     P4      DATA    0C0H
                +1    40     
  00D0          +1    41     PSW     DATA    0D0H
  00D7          +1    42     CY      BIT     0D7H
  00D6          +1    43     AC      BIT     0D6H
  00D5          +1    44     F0      BIT     0D5H
  00D4          +1    45     RS1     BIT     0D4H
  00D3          +1    46     RS0     BIT     0D3H
  00D2          +1    47     OV      BIT     0D2H
  00D0          +1    48     P       BIT     0D0H
                +1    49     
  00E0          +1    50     ACC     DATA    0E0H
  00F0          +1    51     B       DATA    0F0H
  0081          +1    52     SP      DATA    81H
  0082          +1    53     DPL     DATA    82H
  0083          +1    54     DPH     DATA    83H
  0087          +1    55     PCON    DATA    87H
  008F          +1    56     CKCON   DATA    8FH
                +1    57     
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:03:35 PAGE     2

                +1    58     ;------------------ TIMERS registers ---------------------
  0088          +1    59     TCON    DATA    88H
  008F          +1    60     TF1     BIT     8FH
  008E          +1    61     TR1     BIT     8EH
  008D          +1    62     TF0     BIT     8DH
  008C          +1    63     TR0     BIT     8CH
  008B          +1    64     IE1     BIT     8BH
  008A          +1    65     IT1     BIT     8AH
  0089          +1    66     IE0     BIT     89H
  0088          +1    67     IT0     BIT     88H
                +1    68             
  0089          +1    69     TMOD    DATA    89H
                +1    70     
  00C8          +1    71     T2CON   DATA    0C8H
  00CF          +1    72     TF2     BIT     0CFH
  00CE          +1    73     EXF2    BIT     0CEH
  00CD          +1    74     RCLK    BIT     0CDH
  00CC          +1    75     TCLK    BIT     0CCH
  00CB          +1    76     EXEN2   BIT     0CBH
  00CA          +1    77     TR2     BIT     0CAH
  00C9          +1    78     C_T2    BIT     0C9H
  00C8          +1    79     CP_RL2  BIT     0C8H
                +1    80             
  00C9          +1    81     T2MOD   DATA    0C9H    
  008A          +1    82     TL0     DATA    8AH
  008B          +1    83     TL1     DATA    8BH
  00CC          +1    84     TL2     DATA    0CCH
  008C          +1    85     TH0     DATA    8CH
  008D          +1    86     TH1     DATA    8DH
  00CD          +1    87     TH2     DATA    0CDH    
  00CA          +1    88     RCAP2L  DATA    0CAH    
  00CB          +1    89     RCAP2H  DATA    0CBH    
  00A6          +1    90     WDTRST  DATA    0A6H    
  00A7          +1    91     WDTPRG  DATA    0A7H    
                +1    92     
                +1    93     
                +1    94     ;------------------- UART registers ------------------------
  0098          +1    95     SCON    DATA    98H
  009F          +1    96     SM0     BIT     9FH
  009F          +1    97     FE      BIT     9FH
  009E          +1    98     SM1     BIT     9EH
  009D          +1    99     SM2     BIT     9DH
  009C          +1   100     REN     BIT     9CH
  009B          +1   101     TB8     BIT     9BH
  009A          +1   102     RB8     BIT     9AH
  0099          +1   103     TI      BIT     99H
  0098          +1   104     RI      BIT     98H
                +1   105     
  0099          +1   106     SBUF    DATA    99H
  00B9          +1   107     SADEN   DATA    0B9H
  00A9          +1   108     SADDR   DATA    0A9H    
                +1   109     
                +1   110     ;-------------------- ADC registers ----------------------
  00F2          +1   111     ADCLK   DATA    0F2H    
  00F3          +1   112     ADCON   DATA    0F3H    
  00F4          +1   113     ADDL    DATA    0F4H    
  00F5          +1   114     ADDH    DATA    0F5H    
  00F6          +1   115     ADCF    DATA    0F6H    
                +1   116     
                +1   117     ;-------------------- FLASH EEPROM registers ------------
  00F1          +1   118     FPGACON  DATA   0F1H    
  00D1          +1   119     FCON    DATA    0D1H    
  00D2          +1   120     EECON   DATA    0D2H    
  008E          +1   121     AUXR    DATA    8EH
  00A2          +1   122     AUXR1   DATA    0A2H
                +1   123     
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:03:35 PAGE     3

                +1   124     ;-------------------- IT registers -----------------------
  00F8          +1   125     IPL1    DATA    0F8H    
  00F7          +1   126     IPH1    DATA    0F7H    
  00A8          +1   127     IEN0    DATA    0A8H    
  00B8          +1   128     IPL0    DATA    0B8H    
  00B7          +1   129     IPH0    DATA    0B7H    
  00E8          +1   130     IEN1    DATA    0E8H    
                +1   131     
                +1   132     ;  IEN0  
  00AF          +1   133     EA      BIT     0AFH
  00AE          +1   134     EC      BIT     0AEH
  00AD          +1   135     ET2     BIT     0ADH
  00AC          +1   136     ES      BIT     0ACH
  00AB          +1   137     ET1     BIT     0ABH
  00AA          +1   138     EX1     BIT     0AAH
  00A9          +1   139     ET0     BIT     0A9H
  00A8          +1   140     EX0     BIT     0A8H
                +1   141     
                +1   142     ;  IEN1 
  00EA          +1   143     ETIM    BIT     0EAH
  00E9          +1   144     EADC    BIT     0E9H
  00E8          +1   145     ECAN    BIT     0E8H
                +1   146     
                +1   147     ;--------------------- PCA registers --------------------
  00D8          +1   148     CCON    DATA    0D8H    
  00DF          +1   149     CF              BIT             0DFH
  00DE          +1   150     CR              BIT             0DEH
  00D4          +1   151     CCF4    BIT             0D4H
  00D3          +1   152     CCF3    BIT             0D3H
  00D2          +1   153     CCF2    BIT             0D2H
  00D1          +1   154     CCF1    BIT             0D1H
  00D0          +1   155     CCF0    BIT             0D0H
                +1   156     
  00D9          +1   157     CMOD    DATA    0D9H    
  00F9          +1   158     CH      DATA    0F9H    
  00E9          +1   159     CL      DATA    0E9H    
  00FA          +1   160     CCAP0H  DATA    0FAH    
  00EA          +1   161     CCAP0L  DATA    0EAH    
  00DA          +1   162     CCAPM0  DATA    0DAH    
  00FB          +1   163     CCAP1H  DATA    0FBH    
  00EB          +1   164     CCAP1L  DATA    0EBH    
  00DB          +1   165     CCAPM1  DATA    0DBH    
  00FC          +1   166     CCAP2H  DATA    0FCH    
  00EC          +1   167     CCAP2L  DATA    0ECH    
  00DC          +1   168     CCAPM2  DATA    0DCH    
  00FD          +1   169     CCAP3H  DATA    0FDH    
  00ED          +1   170     CCAP3L  DATA    0EDH    
  00DD          +1   171     CCAPM3  DATA    0DDH    
  00FE          +1   172     CCAP4H  DATA    0FEH    
  00EE          +1   173     CCAP4L  DATA    0EEH    
  00DE          +1   174     CCAPM4  DATA    0DEH    
                +1   175     
                +1   176     ;------------------- CAN registers --------------------------
  009B          +1   177     CANGIT          DATA    09BH
  009C          +1   178     CANTEC          DATA    09CH
  009D          +1   179     CANREC          DATA    09DH
  00A1          +1   180     CANTCON         DATA    0A1H    
  00A3          +1   181     CANMSG          DATA    0A3H    
  00A4          +1   182     CANTTCL         DATA    0A4H    
  00A5          +1   183     CANTTCH         DATA    0A5H    
  00AA          +1   184     CANGSTA         DATA    0AAH
  00AB          +1   185     CANGCON         DATA    0ABH
  00AC          +1   186     CANTIML         DATA    0ACH    
  00AD          +1   187     CANTIMH         DATA    0ADH    
  00AE          +1   188     CANSTMPL        DATA    0AEH    
  00AF          +1   189     CANSTMPH        DATA    0AFH
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:03:35 PAGE     4

  00B1          +1   190     CANPAGE         DATA    0B1H
  00B2          +1   191     CANSTCH         DATA    0B2H    
  00B3          +1   192     CANCONCH        DATA    0B3H    
  00B4          +1   193     CANBT1          DATA    0B4H
  00B5          +1   194     CANBT2          DATA    0B5H
  00B6          +1   195     CANBT3          DATA    0B6H
  00BA          +1   196     CANSIT1         DATA    0BAH
  00BB          +1   197     CANSIT2         DATA    0BBH    
  00BC          +1   198     CANIDT1         DATA    0BCH
  00BD          +1   199     CANIDT2         DATA    0BDH    
  00BE          +1   200     CANIDT3         DATA    0BEH    
  00BF          +1   201     CANIDT4         DATA    0BFH    
  00C1          +1   202     CANGIE          DATA    0C1H
  00C2          +1   203     CANIE1          DATA    0C2H    
  00C3          +1   204     CANIE2          DATA    0C3H
  00C4          +1   205     CANIDM1         DATA    0C4H
  00C5          +1   206     CANIDM2         DATA    0C5H
  00C6          +1   207     CANIDM3         DATA    0C6H
  00C7          +1   208     CANIDM4         DATA    0C7H
  00CE          +1   209     CANEN1          DATA    0CEH
  00CF          +1   210     CANEN2          DATA    0CFH
                +1   211     
                +1   212     
                     213     
                     214     
----                 215     DSEG AT 30h
                     216     
  0054               217             cursor DATA 54h
  0053               218             blockIndex DATA 53h
  0057               219             blockIteration DATA 57h
  005A               220             ADCVal DATA 5Ah
----                 221     CSEG    
                     222     ;Boot code
0000                 223     ORG 0000h
0000 020046          224     LJMP init 
                     225     
                     226     ;Interrupt address vectors
000B                 227     ORG 000Bh
000B 020086          228     LJMP ISR_tmr0
                     229     
001B                 230     ORG 001Bh
001B 0200F2          231     LJMP ISR_tmr1
                     232     
0043                 233     ORG 0043h
0043 020129          234     LJMP ISR_ADC
                     235     
                     236     
                     237     
                     238     
                     239     ;Address declarations
  0030               240     vidMemStart EQU 030h
  0052               241     vidMemEnd EQU 052h
  0023               242     vidMemLength EQU 35
                     243     
  0028               244     numberOfCollumns EQU 40
  0007               245     numberOfRows EQU 7
  0005               246     bytesPerRow EQU 5
                     247             
  0008               248     bytesPerBlock EQU 8
                     249             
  00FE               250     cursorByte EQU 11111110b
  0001               251     cursorByteMask EQU 00000001b
                     252     
                     253     
                     254     
                     255     
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:03:35 PAGE     5

                     256     ;Initialization code
0046                 257     init:   
                     258     
                     259     ;**************** Init Timers **********************************
0046 758911          260                             MOV TMOD,#00010001b ;config tmr0 & tmr1 in 16bit mode
0049 758CFF          261                             MOV TH0,#0FFh ;tmr0 MSB
004C 758AFF          262                             MOV TL0,#0FFh ;tmr0 LSB
                     263                             
004F 758DFF          264                             MOV TH1,#0FFh ;tmr0 MSB
0052 758BFF          265                             MOV TL1,#0FFh ;tmr0 LSB
                     266                             
0055 D2AB            267                             SETB ET1
0057 D2A9            268                             SETB ET0 ;enable interrupt of tmr0
                     269     
                     270     
0059 758170          271                             MOV SP, #70h ; move stackpointer above registers
                     272                              
                     273                              
005C 1201A2          274             LCALL gameInit
                     275     
                     276     ;*********************** ADC CONFIG ***********************************************
                     277             ; Setup for the ADC
005F 75F6FF          278             MOV ADCF,#0FFh ;enable the adc...
0062 D2E9            279             SETB EADC
0064 75F32F          280             MOV ADCON, #00101111b ; set P1.0 as ADC input
0067 755A60          281             MOV ADCVal,#01100000b
                     282     
                     283             
                     284     ;************* end of init: enable timers *********************
                     285     
006A D28C            286     SETB TR0 ;run tmr0
006C D28E            287     SETB TR1
006E D2AF            288     SETB EA ;global interrupt enable
                     289     
0070 C2A3            290     CLR P2.3 ;led to see if code is running
0072 020075          291     LJMP main
                     292     
                     293                             
                     294     ;*********************************Main program***************************************
0075                 295     main:           
                     296     ;does except update the random numbers actually everything happens timer based since the up
                             dating of either one is mutually exclusive, 
                     297     ;no interrupt may happen while they are busy
0075 1201EF          298             LCALL LFSR ; update random value
0078 3059FA          299             JNB 59h, main ; if not game over go back to main
                     300                                     ;this is the game over routine
                     301             ;CLR RS1 ;move to registerbank 00h to 08h
                     302             ;CLR RS0        
                     303             ;;stop timers shortly to not interrupt the vid mem update, this routine only happen
                             s when game over so no problem
                     304             ;CLR EA ;global interrupt disable since the video memory may not be updated while t
                             he screen is updated
                     305             ;CLR TR0 ;stop tmr0
                     306             ;CLR TR1
                     307                             
                     308             ;MOV R0,#39
                     309             ;MOV R1,#0
                     310             ;MOV DPTR,#game_over ;this pushes the game over message to the RAM
                     311     ;gameOverLoop:
                     312             ;MOV A,R0
                     313             ;MOVC A,@A+DPTR
                     314             ;MOV R7,A
                     315             ;LCALL dispColShift
                     316             ;DJNZ R0,gameOverLoop
                     317             ;MOV A,R0
                     318             ;MOVC A,@A+DPTR
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:03:35 PAGE     6

                     319             ;MOV R7,A
                     320             ;LCALL dispColShift
                     321             ;;restart the timers after update
                     322             ;SETB TR0 ;run tmr0
                     323             ;SETB TR1
                     324             ;SETB EA ;global interrupt enable
                     325     
                     326             ;LCALL delay ;delay for a while (blocking delay)
007B 120227          327             LCALL keyboardScan
007E 1201A2          328             LCALL gameInit ;re init the game
0081 C259            329             CLR 59h  ;set state in running game
                     330             
0083 020075          331             LJMP main
                     332                     
                     333     ;******************************* Interrupt handlers *********************************
                     334     
                     335     ; This timer refreshes the screen at a fast enough rate
                     336     ; it gets the data from the ram and shifts it onto the display.
                     337     ; based on the value of the ADC it also shows the cursor on the correct location.  
0086                 338     ISR_tmr0: 
0086 C2AF            339                             CLR EA ;global interrupt disable since the video memory may not be 
                             updated while the screen is updated
0088 C28C            340                             CLR TR0 ;stop tmr0
008A C28E            341                             CLR TR1
                     342                             
                     343                             ;reload timer0
008C 758CD0          344                             MOV TH0,#0D0h ;tmr0 MSB
008F 758A00          345                             MOV TL0,#000h ;tmr0 LSB
                     346                             
                     347     ;DISPLAY PART
0092 C2D4            348                     CLR RS1 ;move to registerbank 08h to 0Fh to prevent overwriting of register
                             s
0094 D2D3            349                     SETB RS0
                     350                     
                     351             ;This parts displays the game background on the screen from ram
0096 7907            352                     MOV R1, #numberOfRows ;counting register to 8 for rows
0098 7A7F            353                     MOV R2, #01111111b ;data rows (msb = 0, others are 1) single bit zero, to e
                             nable current row
009A 7830            354                     MOV R0, #vidMemStart ; starting adress disp mem
009C                 355     rowIteration:
                     356     
009C 7F05            357                             MOV R7, #bytesPerRow ; counter for 5 bytes of row data
009E                 358     lineBytes:
009E E6              359                             MOV A,@R0 ; get data from ram starting at the lowest address
009F FE              360                             MOV R6,A ; move data to R6 to shift it into the screen
00A0 3141            361                             acall shiftR6 ; shift byte into screen
00A2 08              362                             INC R0 ; increase address by one for next byte to put onto the scre
                             en
00A3 DFF9            363                             DJNZ R7,lineBytes ; rinse and repeat for the full row
                     364                             
                     365                             ;shift R2 with the current row enabled in the register
00A5 EA              366                             MOV A,R2
00A6 FE              367                             MOV R6, A
00A7 3141            368                             Acall shiftR6 ; shift column data byte into SR
00A9 D2B2            369                             SETB P3.2 ; cycle store clock
00AB C2B2            370                             CLR P3.2
                     371     
                     372                             ;rotate row bit to enable next row
00AD EA              373                             MOV A, R2 
00AE 03              374                             RR A
00AF FA              375                             MOV R2,A
                     376                              ; repeat until 7 rows done
00B0 D9EA            377                             DJNZ R1, rowIteration
                     378     
                     379     
00B2 7906            380                             MOV R1, #06
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:03:35 PAGE     7

00B4                 381     blankDisplay:                    ;loop to approximate the timing of the other rows to have 
                             similar brightness
00B4 7EFF            382                             MOV R6, #0FFh
00B6 3141            383                             Acall shiftR6 ; shift collumn data byte into SR
00B8 D9FA            384                             DJNZ R1,blankDisplay
                     385                             
00BA D2B2            386                             SETB P3.2 ; cycle store clock
00BC C2B2            387                             CLR P3.2
                     388                             
00BE 205926          389                             JB 59h,afterCollision ; if game over skip the cursor
                     390             ;This part displays the cursor, making use of the duty cycle of the previous displa
                             y part over the timerperiod,
                     391             ;the bringhtness of the cursor can be controlled
                     392             
00C1 7904            393                             MOV R1, #04  ;the first 4 bytes that are shifted into the register 
                             puts all those leds off
00C3                 394     cursorLbl:                       ;loop to approximate the timing of the other rows to have 
                             similar brightness
00C3 7EFF            395                             MOV R6, #0FFh
00C5 3141            396                             Acall shiftR6 ; shift collumn data byte into SR
00C7 D9FA            397                             DJNZ R1,cursorLbl
                     398                             
00C9 7EFE            399                             MOV R6, #cursorByte ;shift this byte into the shift registers to en
                             able a led in the eight row of the display to be matched with the cursor location
00CB 3141            400                             Acall shiftR6 ; shift collumn data byte into SR
                     401                             
                     402     
                     403                             ;MOV R6, #11101111b
00CD E55A            404                             MOV A,ADCVal ;get the last updated value of the adc to A
00CF 75F025          405                             MOV B,#37 
00D2 84              406                             DIV AB ;divide the ADC value to get a value between 0 and 6 to for 
                             the cursor position
00D3 FE              407                             MOV R6, A ;stockate in R6
00D4 74FD            408                             MOV A,#11111101b ;A single pixel for the row enable
                     409     
00D6                 410             locationLbl:
00D6 23              411                             RL A
00D7 DEFD            412                             DJNZ R6,locationLbl  ;rotate cursor data equal to location previous
                             ly calculated
00D9 4401            413                             ORL A,#00000001b ;mask data over the display       ;TODO: mag evt w
                             eg
00DB F554            414                             MOV cursor,A
00DD FE              415                             MOV R6,A ; move cursor data to R6 for shift
                     416                             
00DE 3141            417                             Acall shiftR6 ; shift cursor position data byte into SR for row ena
                             ble
00E0 D2B2            418                             SETB P3.2 ; cycle store clock
00E2 C2B2            419                             CLR P3.2
                     420                             
                     421                             
00E4 120152          422                             LCALL detectCollision ; check if a collision with the background ha
                             ppened with the current cursor position ;TODO: mag evt na de timers geplaatst worden
00E7                 423                             afterCollision:
                     424     
00E7 C2D4            425                             CLR RS1 ;move to registerbank 00h to 08h
00E9 C2D3            426                             CLR RS0 
                     427                             ;reenable timers
00EB D28C            428                             SETB TR0 ;run tmr0
00ED D28E            429                             SETB TR1
00EF D2AF            430                             SETB EA ;global interrupt disable
                     431                             
00F1 32              432                             RETI
                     433     
                     434     ;************************** This timers updates the background of the game ****************
                             ******************
00F2                 435     ISR_tmr1:
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:03:35 PAGE     8

                     436     ;DISPLAY PART
00F2 C28C            437                     CLR TR0 ;stop timer during buffer update
00F4 C28E            438                     CLR TR1 ;stop timer during buffer update
00F6 C2AF            439                     CLR EA ;global interrupt disable
                     440                     
                     441                     ;reload timers
00F8 758D00          442                     MOV TH1,#00h ;tmr0 MSB
00FB 758B00          443                     MOV TL1,#00h ;tmr0 LSB
                     444                     
00FE C0E0            445                     push Acc
0100 20591B          446                     JB 59h,afterRandom
                     447                     ;get the current block index from ram
0103 E553            448                     MOV A, blockIndex
0105 900230          449                     MOV DPTR, #block0               ; start at block0 and count from there
0108 93              450                     MOVC A,@A+DPTR
0109 FF              451                     MOV R7,A ; stockate data in R7 for collumnshift function
010A 1201BE          452                     LCALL dispColShift ; shift the new collumn in
                     453                     
010D E553            454                     MOV A, blockIndex ; retrieve current data offset
010F 04              455                     INC A; advance one adress
0110 F553            456                     MOV blockIndex, A ; save current adress
                     457                     
0112 AB57            458                     MOV R3, blockIteration ;get current iteration from address this counts the 
                             number of collumns from a certain block that have already been shifted
                     459                     
0114 DB08            460                     DJNZ R3, afterRandom ; if the last collumn of the block is not updated jump
                              over the generation of the next block
                     461                     
0116 7B08            462                     MOV R3,#bytesPerBlock ; repeat 4 times
0118 E518            463                     MOV A,18h ; get data from MSB LFSR
011A 5438            464                     ANL A,#0111000b ;mask for the number of blocks  instead of dividing, this k
                             eeps 8 possible values for the 8 blocks,
                     465                                                     ;with a distance of 8 from each other match
                             ing the number of collumns of a block
011C F553            466                     MOV blockIndex, A ; save current adress for next block
                     467     
011E                 468             afterRandom:
011E 8B57            469                     MOV blockIteration,R3 ;this saves the current shifted collumn count of a bl
                             ock in ram 
                     470                     ;pop A and restart timers
0120 D0E0            471                     pop Acc
0122 D28E            472                     SETB TR1 
0124 D28C            473                     SETB TR0
0126 D2AF            474                     SETB EA
                     475     
0128 32              476     reti
                     477     
                     478     
                     479     ;*********************** This interrupt updates the value from the ADC ********************
                             **************
0129                 480     ISR_ADC:
                     481     
0129 C28C            482                     CLR TR0 ;stop timer during buffer update
012B C28E            483                     CLR TR1 ;stop timer during buffer update
012D C2AF            484                     CLR EA ;global interrupt disable
                     485                     
012F C0E0            486     push Acc
0131 E5F5            487             MOV A, ADDH ;get the highest 8 bits, low resolution is not needed,
0133 F55A            488             MOV ADCVal,A ; move the value to ram
0135 75F32F          489             MOV ADCON, #00101111b ; set P1.0 as ADC input, restart conversion
0138 D0E0            490     pop Acc
                     491     
013A D28E            492                     SETB TR1 ;stop timer during buffer update
013C D28C            493                     SETB TR0
013E D2AF            494                     SETB EA
0140 32              495     reti
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:03:35 PAGE     9

                     496     
                     497     
                     498     ;******************************************************************************************
                             ************
                     499     ;********************************* HELPER FUNCTIONS ***************************************
                             **********
                     500     ;******************************************************************************************
                             **********
                     501     
                     502     
                     503     ;**************************$ This function shifts the byte stockated in R6 into the shiftre
                             gisters connected to P4.1****************************************
0141                 504     shiftR6:
0141 C0E0            505                                     push Acc
0143 EE              506                                     MOV A, R6  ; move the value to A
0144 7E08            507                                     MOV R6, #08 ;counting register to 8
0146                 508                                     Reg:
0146 13              509                                     RRC A ;rotate accumulator troug carre to get the the LSB in
                             to the carry
0147 92C1            510                                     MOV P4.1,C ;carry to the data pin
0149 D2C0            511                                     SETB P4.0 ; cycle serial clock
014B C2C0            512                                     CLR P4.0
014D DEF7            513                                     DJNZ R6,Reg ;if 8 bits are shifted go further otherwise rep
                             eat
014F D0E0            514                                     pop Acc
0151 22              515                                     ret
                     516     
                     517     ;**************************$ This function detects the collisions of the cursor with the ba
                             ckground blocks **************************************************
0152                 518     detectCollision:
                     519     
                     520     ; this moves the eight collumn of the display data into a single byte to be matched with th
                             e cursor position
0152 E534            521             MOV A,34h ;get the byte of the first row
0154 13              522             RRC A ;shift the LSB into the carry, this matches the eight collumn of that row.
0155 9267            523             MOV 67h,C ;stockate C in the MSB of the collumn
                     524             
0157 E539            525             MOV A,39h ;second row
0159 13              526             RRC A
015A 9266            527             MOV 66h,C ;C to MSB-1
                     528             
015C E53E            529             MOV A,3Eh
015E 13              530             RRC A
015F 9265            531             MOV 65h,C
                     532             
0161 E543            533             MOV A,43h
0163 13              534             RRC A
0164 9264            535             MOV 64h,C
                     536             
0166 E548            537             MOV A,48h
0168 13              538             RRC A
0169 9263            539             MOV 63h,C
                     540             
016B E54D            541             MOV A,4Dh
016D 13              542             RRC A
016E 9262            543             MOV 62h,C
                     544             
0170 E552            545             MOV A,52h ; seventh row, to LSB + 1
0172 13              546             RRC A
0173 9261            547             MOV 61h,C
                     548     
0175 C260            549             CLR 60h ; clear the LSB ;TODO needed?
                     550             
0177 E52C            551             MOV A,2Ch ;move the constructed byte to A
0179 F4              552             CPL A ; complement it because all the 0 represent walls
017A F52C            553             MOV 2Ch,A ; move it back
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:03:35 PAGE    10

                     554     
017C E554            555             MOV A,cursor ; get the cursor data
017E F4              556             CPL A ; complement it since the 0 is where the cursor is, all others should be 1
017F 54FE            557             ANL A,#11111110b ; mask it so possible residual data on the invisible eight row doe
                             s not influence the detection
0181 552C            558             ANL A,2Ch ; And the cursor positon in A with the eight collumn of the screen
                     559                               ; if the cursor is on the same location as a lit pixel (obstackle
                             /wall) the AND will produce a 1 on a certain position
                     560             
0183 7001            561             JNZ dead ; if the AND action is !=0 a collision is detected , then jump to the dead
                              routine
                     562     
0185 22              563             ret
                     564             
                     565     ;***************** This routine is executed when a collision is detected ******************
                             **
0186                 566     dead:
                     567     
                     568     ; this clear the game field in ram
                     569     ;MOV R0,#numberOfCollumns
                     570     ;gameReset:
                     571                     ;MOV R7,#0FFh ; stockate data in R7 for collumnshift
                     572                     ;LCALL dispColShift
                     573                     ;DJNZ R0, gameReset
0186 C2D4            574             CLR RS1 ;move to registerbank 00h to 08h
0188 C2D3            575             CLR RS0 
                     576                             
018A 7827            577             MOV R0,#39
018C 7900            578             MOV R1,#0
018E 900278          579             MOV DPTR,#game_over ;this pushes the game over message to the RAM
0191                 580     gameOverLoop:
0191 E8              581             MOV A,R0
0192 93              582             MOVC A,@A+DPTR
0193 FF              583             MOV R7,A
0194 1201BE          584             LCALL dispColShift
0197 D8F8            585             DJNZ R0,gameOverLoop
0199 E8              586             MOV A,R0
019A 93              587             MOVC A,@A+DPTR
019B FF              588             MOV R7,A
019C 1201BE          589             LCALL dispColShift
                     590     
019F D259            591     SETB 59h ;set game over state
01A1 22              592     ret ;return to caller (ISR_tmr0)
                     593     
                     594     
01A2                 595     gameInit:
                     596     ;***************** Initialize ram to all ones (all leds off)*******************************
                                           
01A2 7830            597                             MOV R0,#vidMemStart 
01A4 7928            598                             MOV R1,#numberOfCollumns
01A6                 599     ramInit:
01A6 76FF            600                             MOV @R0,#0FFh
01A8 08              601                             INC R0
01A9 D9FB            602                             DJNZ R1,ramInit
                     603                             
                     604     ;***************** Init the game logic  *************************
01AB 75186A          605     MOV 18h, #1101010b 
                     606     
01AE 7B08            607     MOV R3,#bytesPerBlock ; repeat 4 times
01B0 E518            608     MOV A,18h ; get data from MSB LFSR
01B2 5438            609     ANL A,#0111000b ;mask for the number of blocks          
01B4 F553            610     MOV blockIndex, A ; save current adress for next block
01B6 1201EF          611     LCALL LFSR  ; generate new random data
01B9 B2A4            612     CPL P2.4 ; toggle led to see if working
01BB 8B57            613     MOV blockIteration,R3
                     614     
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:03:35 PAGE    11

01BD 22              615     ret
                     616     
                     617     
                     618     
                     619             
                     620     
                     621     ;*************************** This function shifts a collumn in the game to make it go forwa
                             rd *******************
                     622     
                     623     ;shift 7 MSB in framebuffer
01BE                 624     dispColShift:
01BE EF              625             MOV A, R7 ; move the collumn that needs to be shifted in from R7 into A
01BF 7D07            626             MOV     R5, #numberOfRows ;counter to count rows 
01C1 7930            627             MOV R1, #vidMemStart ; start at lowest address to increase each time
01C3                 628     dispColShiftLoop: ; this part is looped
01C3 13              629             RRC A ;Rotate LSB in carry to shift into the row
01C4 7E05            630             MOV     R6, #bytesPerRow ; counter to rotate 5 horizontal bytes will be used in dis
                             pRowShift to count the progress
                     631             
01C6 C0E0            632             PUSH ACC ; push acc to save current data of A
01C8 31CF            633             ACALL dispRowShift ; rotate all row bytes 
01CA D0E0            634             POP ACC ;pop the accumulator
01CC DDF5            635             DJNZ R5, dispColShiftLoop ; repeat until all rows are shifted
01CE 22              636             RET
                     637             
                     638             
                     639             ;TODO move this into the dispColShiftLoop instead of calling it
01CF                 640     dispRowShift: ; this rotates the carry into the current memory address
01CF E7              641             MOV A,@R1 ;start at the current addres and move it from RAM into A
01D0 33              642             RLC A ;rotate the carry into the LSB of the current byte, the LSB comes into the th
                             e carry 
01D1 F7              643             MOV @R1,A ;move the updated byte back into ram
01D2 09              644             INC R1   ;increase for the next byte
01D3 DEFA            645             DJNZ R6, dispRowShift ; do this until the current row is updated. The carry becomes
                              the LSB, the MSB becomes the carry to become the LSB of the next byte
01D5 22              646             RET
                     647             
                     648             
                     649             
                     650             
                     651     ;rudimentary delay for test purposes
01D6                 652     delay:   
01D6 7D0F            653                     MOV R5, #0Fh
01D8 1201DC          654                     LCALL loop
01DB 22              655                     RET
                     656     
01DC                 657     loop:   
01DC 7E00            658                     MOV R6, #00h
01DE 1201E4          659                     LCALL loop2
01E1 DDF9            660                     DJNZ R5, loop
01E3 22              661                     RET
01E4                 662     loop2:  
01E4 7F00            663                     MOV R7, #00h
01E6 1201EC          664                     LCALL loop3
01E9 DEF9            665                     DJNZ R6, loop2
01EB 22              666                     RET
                     667                     
01EC DFFE            668     loop3:  DJNZ R7,loop3
01EE 22              669                     RET
                     670                     
                     671     ;**********************************************************************************        
                                  
                     672     ;random number generator code trough LFSR               
01EF                 673     LFSR: 
01EF D2D4            674             SETB RS1 ;move to registerbank 08h to 0Fh
01F1 D2D3            675             SETB RS0
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:03:35 PAGE    12

01F3 E8              676             MOV A,R0 ;Save highest byte to address
01F4 FC              677             MOV R4,A
01F5 12021A          678             lcall LFSRShift
01F8 12021A          679             lcall LFSRShift
01FB 6C              680             XRL A,R4
01FC FC              681             MOV R4,A
01FD 12021A          682             lcall LFSRShift
0200 12021A          683             lcall LFSRShift
0203 12021A          684             lcall LFSRShift
0206 12021A          685             lcall LFSRShift
0209 6C              686             XRL A,R4
020A FC              687             MOV R4,A                
020B 12021A          688             lcall LFSRShift
020E 6C              689             XRL A,R4
020F FC              690             MOV R4,A
0210 12021A          691             lcall LFSRShift
0213 EC              692             MOV A,R4
0214 FB              693             MOV R3,A
                     694             
0215 C2D4            695             CLR RS1 ;move to registerbank 08h to 0Fh
0217 C2D3            696             CLR RS0
                     697             
0219 22              698             RET
                     699             
                     700     ;shift the 32 bit registers of the LFSR
021A                 701     LFSRShift: 
021A EB              702             MOV A,R3 ; rotate shift register
021B 33              703             RLC A
021C FB              704             MOV R3,A
021D EA              705             MOV A,R2 ; rotate shift register
021E 33              706             RLC A
021F FA              707             MOV R2,A
0220 E9              708             MOV A,R1 ; rotate shift register
0221 33              709             RLC A
0222 F9              710             MOV R1,A
0223 E8              711             MOV A,R0 ; rotate shift register
0224 33              712             RLC A
0225 F8              713             MOV R0,A
0226 22              714             ret     
                     715     
                     716     ;function to scan the keyboard, jumps to itself if no button is pressed, 
0227                 717     keyboardScan:   
                     718                             ;Column 1  2  3  4
                     719                             ;ROW 4  7  8  9  F
                     720                             ;ROW 3  4  5  6  E
                     721                             ;ROW 2  1  2  3  D
                     722                             ;ROW 1  A  0  B  C
                     723                             ;ROW 1  
0227 7580FF          724                             Mov P0, #0FFh
022A C287            725                             CLR P0.7
022C 2083F8          726                             JB  P0.3, keyboardScan
022F 22              727                             ret
                     728             
                     729     
                     730     ;******************************************************************************************
                             ***********************
                     731     ;************************************* DIRECT BYTES IN CODE MEMORY ************************
                             **********************
                     732     ;******************************************************************************************
                             ********************$
                     733     
                     734     ;*********************** These are the obstackle blocks ***********************************
                             ****************
0230                 735             block0:
0230 3E              736             db 0x3e
0231 3E              737             db 0x3e
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:03:35 PAGE    13

0232 3E              738             db 0x3e
0233 3E              739             db 0x3e
0234 3E              740             db 0x3e
0235 3E              741             db 0x3e
0236 3E              742             db 0x3e
0237 3E              743             db 0x3e
                     744             
                     745             
0238                 746             block1:
                     747             
0238 3E              748             db 0x3e
0239 3E              749             db 0x3e
023A 3E              750             db 0x3e
023B 1C              751             db 0x1C
023C 1C              752             db 0x1C
023D 1C              753             db 0x1C
023E 3E              754             db 0x3e
023F 3E              755             db 0x3e
                     756             
0240                 757             block2:
                     758             
0240 3E              759             db 0x3e
0241 3E              760             db 0x3e
0242 3E              761             db 0x3e
0243 38              762             db 0x38
0244 38              763             db 0x38
0245 38              764             db 0x38
0246 3E              765             db 0x3e
0247 3E              766             db 0x3e
                     767                     
0248                 768             block3:
                     769             
0248 3E              770             db 0x3e
0249 3E              771             db 0x3e
024A 3E              772             db 0x3e
024B 18              773             db 0x18
024C 18              774             db 0x18
024D 18              775             db 0x18
024E 3E              776             db 0x3e
024F 3E              777             db 0x3e
                     778                     
0250                 779             block4:
                     780             
0250 3E              781             db 0x3e
0251 3E              782             db 0x3e
0252 3E              783             db 0x3e
0253 06              784             db 0x06
0254 06              785             db 0x06
0255 3E              786             db 0x3e
0256 3E              787             db 0x3e
0257 3E              788             db 0x3e
                     789             
0258                 790             block5:
0258 3E              791             db 0x3e
0259 3E              792             db 0x3e
025A 3E              793             db 0x3e
025B 08              794             db 0x08
025C 08              795             db 0x08
025D 3E              796             db 0x3e
025E 3E              797             db 0x3e
025F 3E              798             db 0x3e
                     799                     
0260                 800             block6:
                     801             
0260 3E              802             db 0x3e
0261 3E              803             db 0x3e
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:03:35 PAGE    14

0262 3E              804             db 0x3e
0263 32              805             db 0x32
0264 32              806             db 0x32
0265 3E              807             db 0x3e
0266 3E              808             db 0x3e
0267 3E              809             db 0x3e
                     810                     
0268                 811             block7:
0268 3E              812             db 0x3e
0269 3E              813             db 0x3e
026A 3E              814             db 0x3e
026B 26              815             db 0x26
026C 26              816             db 0x26
026D 3E              817             db 0x3e
026E 3E              818             db 0x3e
026F 3E              819             db 0x3e
                     820                     
0270                 821             block8:
0270 3E              822             db 0x3e
0271 3E              823             db 0x3e
0272 3E              824             db 0x3e
0273 26              825             db 0x26
0274 26              826             db 0x26
0275 3E              827             db 0x3e
0276 3E              828             db 0x3e
0277 3E              829             db 0x3e
                     830                     
                     831     ;Letters for the game over message
0278                 832     game_over:
                     833     
                     834             ;;r
0278 CB              835             db 11001011b
0279 F5              836             db 11110101b
027A F5              837             db 11110101b
027B C1              838             db 11000001b
                     839             ;;e
027C FF              840             db 11111111b
027D D5              841             db 11010101b
027E D5              842             db 11010101b
027F C1              843             db 11000001b
0280 FF              844             db 11111111b
                     845             
                     846             ;;v
0281 E1              847             db 11100001b
0282 DF              848             db 11011111b
0283 DF              849             db 11011111b
0284 E1              850             db 11100001b
0285 FF              851             db 11111111b
                     852                     
                     853             ;;o
0286 C1              854             db 11000001b
0287 DD              855             db 11011101b
0288 DD              856             db 11011101b
0289 C1              857             db 11000001b
028A FF              858             db 11111111b
                     859                     
                     860             ;;space
028B FF              861             db 11111111b
                     862             
                     863             ;;e
028C FF              864             db 11111111b
028D D5              865             db 11010101b
028E D5              866             db 11010101b
028F C1              867             db 11000001b
0290 FF              868             db 11111111b
                     869                     
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:03:35 PAGE    15

                     870             ;;m     
0291 C1              871             db 11000001b    
0292 FB              872             db 11111011b
0293 F7              873             db 11110111b
0294 FB              874             db 11111011b
0295 C1              875             db 11000001b
0296 FF              876             db 11111111b
                     877                     
                     878             ;;a
0297 C3              879             db 11000011b
0298 F5              880             db 11110101b
0299 F5              881             db 11110101b
029A C3              882             db 11000011b
029B FF              883             db 11111111b    
                     884     
                     885             ;;G
029C C5              886             db 11000101b
029D D5              887             db 11010101b
029E DD              888             db 11011101b
029F C1              889             db 11000001b
                     890     
                     891                     
                     892     
                     893     END
                             
                                     
                                             
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:03:35 PAGE    16

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

AC . . . . . . . .  B ADDR   00D0H.6 A   
ACC. . . . . . . .  D ADDR   00E0H   A   
ADCF . . . . . . .  D ADDR   00F6H   A   
ADCLK. . . . . . .  D ADDR   00F2H   A   
ADCON. . . . . . .  D ADDR   00F3H   A   
ADCVAL . . . . . .  D ADDR   005AH   A   
ADDH . . . . . . .  D ADDR   00F5H   A   
ADDL . . . . . . .  D ADDR   00F4H   A   
AFTERCOLLISION . .  C ADDR   00E7H   A   
AFTERRANDOM. . . .  C ADDR   011EH   A   
AUXR . . . . . . .  D ADDR   008EH   A   
AUXR1. . . . . . .  D ADDR   00A2H   A   
B. . . . . . . . .  D ADDR   00F0H   A   
BLANKDISPLAY . . .  C ADDR   00B4H   A   
BLOCK0 . . . . . .  C ADDR   0230H   A   
BLOCK1 . . . . . .  C ADDR   0238H   A   
BLOCK2 . . . . . .  C ADDR   0240H   A   
BLOCK3 . . . . . .  C ADDR   0248H   A   
BLOCK4 . . . . . .  C ADDR   0250H   A   
BLOCK5 . . . . . .  C ADDR   0258H   A   
BLOCK6 . . . . . .  C ADDR   0260H   A   
BLOCK7 . . . . . .  C ADDR   0268H   A   
BLOCK8 . . . . . .  C ADDR   0270H   A   
BLOCKINDEX . . . .  D ADDR   0053H   A   
BLOCKITERATION . .  D ADDR   0057H   A   
BYTESPERBLOCK. . .  N NUMB   0008H   A   
BYTESPERROW. . . .  N NUMB   0005H   A   
CANBT1 . . . . . .  D ADDR   00B4H   A   
CANBT2 . . . . . .  D ADDR   00B5H   A   
CANBT3 . . . . . .  D ADDR   00B6H   A   
CANCONCH . . . . .  D ADDR   00B3H   A   
CANEN1 . . . . . .  D ADDR   00CEH   A   
CANEN2 . . . . . .  D ADDR   00CFH   A   
CANGCON. . . . . .  D ADDR   00ABH   A   
CANGIE . . . . . .  D ADDR   00C1H   A   
CANGIT . . . . . .  D ADDR   009BH   A   
CANGSTA. . . . . .  D ADDR   00AAH   A   
CANIDM1. . . . . .  D ADDR   00C4H   A   
CANIDM2. . . . . .  D ADDR   00C5H   A   
CANIDM3. . . . . .  D ADDR   00C6H   A   
CANIDM4. . . . . .  D ADDR   00C7H   A   
CANIDT1. . . . . .  D ADDR   00BCH   A   
CANIDT2. . . . . .  D ADDR   00BDH   A   
CANIDT3. . . . . .  D ADDR   00BEH   A   
CANIDT4. . . . . .  D ADDR   00BFH   A   
CANIE1 . . . . . .  D ADDR   00C2H   A   
CANIE2 . . . . . .  D ADDR   00C3H   A   
CANMSG . . . . . .  D ADDR   00A3H   A   
CANPAGE. . . . . .  D ADDR   00B1H   A   
CANREC . . . . . .  D ADDR   009DH   A   
CANSIT1. . . . . .  D ADDR   00BAH   A   
CANSIT2. . . . . .  D ADDR   00BBH   A   
CANSTCH. . . . . .  D ADDR   00B2H   A   
CANSTMPH . . . . .  D ADDR   00AFH   A   
CANSTMPL . . . . .  D ADDR   00AEH   A   
CANTCON. . . . . .  D ADDR   00A1H   A   
CANTEC . . . . . .  D ADDR   009CH   A   
CANTIMH. . . . . .  D ADDR   00ADH   A   
CANTIML. . . . . .  D ADDR   00ACH   A   
CANTTCH. . . . . .  D ADDR   00A5H   A   
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:03:35 PAGE    17

CANTTCL. . . . . .  D ADDR   00A4H   A   
CCAP0H . . . . . .  D ADDR   00FAH   A   
CCAP0L . . . . . .  D ADDR   00EAH   A   
CCAP1H . . . . . .  D ADDR   00FBH   A   
CCAP1L . . . . . .  D ADDR   00EBH   A   
CCAP2H . . . . . .  D ADDR   00FCH   A   
CCAP2L . . . . . .  D ADDR   00ECH   A   
CCAP3H . . . . . .  D ADDR   00FDH   A   
CCAP3L . . . . . .  D ADDR   00EDH   A   
CCAP4H . . . . . .  D ADDR   00FEH   A   
CCAP4L . . . . . .  D ADDR   00EEH   A   
CCAPM0 . . . . . .  D ADDR   00DAH   A   
CCAPM1 . . . . . .  D ADDR   00DBH   A   
CCAPM2 . . . . . .  D ADDR   00DCH   A   
CCAPM3 . . . . . .  D ADDR   00DDH   A   
CCAPM4 . . . . . .  D ADDR   00DEH   A   
CCF0 . . . . . . .  B ADDR   00D0H.0 A   
CCF1 . . . . . . .  B ADDR   00D0H.1 A   
CCF2 . . . . . . .  B ADDR   00D0H.2 A   
CCF3 . . . . . . .  B ADDR   00D0H.3 A   
CCF4 . . . . . . .  B ADDR   00D0H.4 A   
CCON . . . . . . .  D ADDR   00D8H   A   
CF . . . . . . . .  B ADDR   00D8H.7 A   
CH . . . . . . . .  D ADDR   00F9H   A   
CKCON. . . . . . .  D ADDR   008FH   A   
CL . . . . . . . .  D ADDR   00E9H   A   
CMOD . . . . . . .  D ADDR   00D9H   A   
CP_RL2 . . . . . .  B ADDR   00C8H.0 A   
CR . . . . . . . .  B ADDR   00D8H.6 A   
CURSOR . . . . . .  D ADDR   0054H   A   
CURSORBYTE . . . .  N NUMB   00FEH   A   
CURSORBYTEMASK . .  N NUMB   0001H   A   
CURSORLBL. . . . .  C ADDR   00C3H   A   
CY . . . . . . . .  B ADDR   00D0H.7 A   
C_T2 . . . . . . .  B ADDR   00C8H.1 A   
DEAD . . . . . . .  C ADDR   0186H   A   
DELAY. . . . . . .  C ADDR   01D6H   A   
DETECTCOLLISION. .  C ADDR   0152H   A   
DISPCOLSHIFT . . .  C ADDR   01BEH   A   
DISPCOLSHIFTLOOP .  C ADDR   01C3H   A   
DISPROWSHIFT . . .  C ADDR   01CFH   A   
DPH. . . . . . . .  D ADDR   0083H   A   
DPL. . . . . . . .  D ADDR   0082H   A   
EA . . . . . . . .  B ADDR   00A8H.7 A   
EADC . . . . . . .  B ADDR   00E8H.1 A   
EC . . . . . . . .  B ADDR   00A8H.6 A   
ECAN . . . . . . .  B ADDR   00E8H.0 A   
EECON. . . . . . .  D ADDR   00D2H   A   
ES . . . . . . . .  B ADDR   00A8H.4 A   
ET0. . . . . . . .  B ADDR   00A8H.1 A   
ET1. . . . . . . .  B ADDR   00A8H.3 A   
ET2. . . . . . . .  B ADDR   00A8H.5 A   
ETIM . . . . . . .  B ADDR   00E8H.2 A   
EX0. . . . . . . .  B ADDR   00A8H.0 A   
EX1. . . . . . . .  B ADDR   00A8H.2 A   
EXEN2. . . . . . .  B ADDR   00C8H.3 A   
EXF2 . . . . . . .  B ADDR   00C8H.6 A   
F0 . . . . . . . .  B ADDR   00D0H.5 A   
FCON . . . . . . .  D ADDR   00D1H   A   
FE . . . . . . . .  B ADDR   0098H.7 A   
FPGACON. . . . . .  D ADDR   00F1H   A   
GAMEINIT . . . . .  C ADDR   01A2H   A   
GAMEOVERLOOP . . .  C ADDR   0191H   A   
GAME_OVER. . . . .  C ADDR   0278H   A   
IE0. . . . . . . .  B ADDR   0088H.1 A   
IE1. . . . . . . .  B ADDR   0088H.3 A   
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:03:35 PAGE    18

IEN0 . . . . . . .  D ADDR   00A8H   A   
IEN1 . . . . . . .  D ADDR   00E8H   A   
INIT . . . . . . .  C ADDR   0046H   A   
INT0 . . . . . . .  B ADDR   00B0H.2 A   
INT1 . . . . . . .  B ADDR   00B0H.3 A   
IPH0 . . . . . . .  D ADDR   00B7H   A   
IPH1 . . . . . . .  D ADDR   00F7H   A   
IPL0 . . . . . . .  D ADDR   00B8H   A   
IPL1 . . . . . . .  D ADDR   00F8H   A   
ISR_ADC. . . . . .  C ADDR   0129H   A   
ISR_TMR0 . . . . .  C ADDR   0086H   A   
ISR_TMR1 . . . . .  C ADDR   00F2H   A   
IT0. . . . . . . .  B ADDR   0088H.0 A   
IT1. . . . . . . .  B ADDR   0088H.2 A   
KEYBOARDSCAN . . .  C ADDR   0227H   A   
LFSR . . . . . . .  C ADDR   01EFH   A   
LFSRSHIFT. . . . .  C ADDR   021AH   A   
LINEBYTES. . . . .  C ADDR   009EH   A   
LOCATIONLBL. . . .  C ADDR   00D6H   A   
LOOP . . . . . . .  C ADDR   01DCH   A   
LOOP2. . . . . . .  C ADDR   01E4H   A   
LOOP3. . . . . . .  C ADDR   01ECH   A   
MAIN . . . . . . .  C ADDR   0075H   A   
NUMBEROFCOLLUMNS .  N NUMB   0028H   A   
NUMBEROFROWS . . .  N NUMB   0007H   A   
OV . . . . . . . .  B ADDR   00D0H.2 A   
P. . . . . . . . .  B ADDR   00D0H.0 A   
P0 . . . . . . . .  D ADDR   0080H   A   
P1 . . . . . . . .  D ADDR   0090H   A   
P2 . . . . . . . .  D ADDR   00A0H   A   
P3 . . . . . . . .  D ADDR   00B0H   A   
P4 . . . . . . . .  D ADDR   00C0H   A   
PCON . . . . . . .  D ADDR   0087H   A   
PSW. . . . . . . .  D ADDR   00D0H   A   
RAMINIT. . . . . .  C ADDR   01A6H   A   
RB8. . . . . . . .  B ADDR   0098H.2 A   
RCAP2H . . . . . .  D ADDR   00CBH   A   
RCAP2L . . . . . .  D ADDR   00CAH   A   
RCLK . . . . . . .  B ADDR   00C8H.5 A   
RD . . . . . . . .  B ADDR   00B0H.7 A   
REG. . . . . . . .  C ADDR   0146H   A   
REN. . . . . . . .  B ADDR   0098H.4 A   
RI . . . . . . . .  B ADDR   0098H.0 A   
ROWITERATION . . .  C ADDR   009CH   A   
RS0. . . . . . . .  B ADDR   00D0H.3 A   
RS1. . . . . . . .  B ADDR   00D0H.4 A   
RXD. . . . . . . .  B ADDR   00B0H.0 A   
SADDR. . . . . . .  D ADDR   00A9H   A   
SADEN. . . . . . .  D ADDR   00B9H   A   
SBUF . . . . . . .  D ADDR   0099H   A   
SCON . . . . . . .  D ADDR   0098H   A   
SHIFTR6. . . . . .  C ADDR   0141H   A   
SM0. . . . . . . .  B ADDR   0098H.7 A   
SM1. . . . . . . .  B ADDR   0098H.6 A   
SM2. . . . . . . .  B ADDR   0098H.5 A   
SP . . . . . . . .  D ADDR   0081H   A   
T0 . . . . . . . .  B ADDR   00B0H.4 A   
T1 . . . . . . . .  B ADDR   00B0H.5 A   
T2CON. . . . . . .  D ADDR   00C8H   A   
T2MOD. . . . . . .  D ADDR   00C9H   A   
TB8. . . . . . . .  B ADDR   0098H.3 A   
TCLK . . . . . . .  B ADDR   00C8H.4 A   
TCON . . . . . . .  D ADDR   0088H   A   
TF0. . . . . . . .  B ADDR   0088H.5 A   
TF1. . . . . . . .  B ADDR   0088H.7 A   
TF2. . . . . . . .  B ADDR   00C8H.7 A   
A51 MACRO ASSEMBLER  MAIN                                                                 05/19/2016 11:03:35 PAGE    19

TH0. . . . . . . .  D ADDR   008CH   A   
TH1. . . . . . . .  D ADDR   008DH   A   
TH2. . . . . . . .  D ADDR   00CDH   A   
TI . . . . . . . .  B ADDR   0098H.1 A   
TL0. . . . . . . .  D ADDR   008AH   A   
TL1. . . . . . . .  D ADDR   008BH   A   
TL2. . . . . . . .  D ADDR   00CCH   A   
TMOD . . . . . . .  D ADDR   0089H   A   
TR0. . . . . . . .  B ADDR   0088H.4 A   
TR1. . . . . . . .  B ADDR   0088H.6 A   
TR2. . . . . . . .  B ADDR   00C8H.2 A   
TXD. . . . . . . .  B ADDR   00B0H.1 A   
VIDMEMEND. . . . .  N NUMB   0052H   A   
VIDMEMLENGTH . . .  N NUMB   0023H   A   
VIDMEMSTART. . . .  N NUMB   0030H   A   
WDTPRG . . . . . .  D ADDR   00A7H   A   
WDTRST . . . . . .  D ADDR   00A6H   A   
WR . . . . . . . .  B ADDR   00B0H.6 A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
