A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:30:05 PAGE     1


MACRO ASSEMBLER A51 V8.02c
OBJECT MODULE PLACED IN .\Objects\main.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE main.a51 NOMOD51 SET(SMALL) DEBUG PRINT(.\Listings\main.lst) OBJECT(.\O
                      bjects\main.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     
                       2     ;*******************************************
                       3     ;* Sensors & Microsystem electronics       *
                       4     ;*                                         *
                       5     ;* Names: Steven Peters - Thomas Lapauw    *
                       6     ;*                                         *
                       7     ;*                Task 9                   *
                       8     ;*                                         *
                       9     ;*******************************************
                      10     
                      11     
                      12     ;Special register declarations
                      13     ;$include (t89c51cc01.inc)
                +1    14     ;*INC*************************************************************************
                +1    15     ; NAME: 89C51CC01.inc           
                +1    16     ;----------------------------------------------------------------------------
                +1    17     ; PURPOSE: for Keil
                +1    18     ;*****************************************************************************
                +1    19     
                +1    20     ;----------------------------------------
                +1    21     ; Include file for 8051 SFR Definitions  
                +1    22     ;----------------------------------------
                +1    23     
                +1    24     ;  BYTE Register 
  0080          +1    25     P0      DATA    80H
  0090          +1    26     P1      DATA    90H
  00A0          +1    27     P2      DATA    0A0H
                +1    28     
  00B0          +1    29     P3      DATA    0B0H
  00B7          +1    30     RD      BIT     0B7H
  00B6          +1    31     WR      BIT     0B6H
  00B5          +1    32     T1      BIT     0B5H
  00B4          +1    33     T0      BIT     0B4H
  00B3          +1    34     INT1    BIT     0B3H
  00B2          +1    35     INT0    BIT     0B2H
  00B1          +1    36     TXD     BIT     0B1H
  00B0          +1    37     RXD     BIT     0B0H
                +1    38     
  00C0          +1    39     P4      DATA    0C0H
                +1    40     
  00D0          +1    41     PSW     DATA    0D0H
  00D7          +1    42     CY      BIT     0D7H
  00D6          +1    43     AC      BIT     0D6H
  00D5          +1    44     F0      BIT     0D5H
  00D4          +1    45     RS1     BIT     0D4H
  00D3          +1    46     RS0     BIT     0D3H
  00D2          +1    47     OV      BIT     0D2H
  00D0          +1    48     P       BIT     0D0H
                +1    49     
  00E0          +1    50     ACC     DATA    0E0H
  00F0          +1    51     B       DATA    0F0H
  0081          +1    52     SP      DATA    81H
  0082          +1    53     DPL     DATA    82H
  0083          +1    54     DPH     DATA    83H
  0087          +1    55     PCON    DATA    87H
  008F          +1    56     CKCON   DATA    8FH
                +1    57     
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:30:05 PAGE     2

                +1    58     ;------------------ TIMERS registers ---------------------
  0088          +1    59     TCON    DATA    88H
  008F          +1    60     TF1     BIT     8FH
  008E          +1    61     TR1     BIT     8EH
  008D          +1    62     TF0     BIT     8DH
  008C          +1    63     TR0     BIT     8CH
  008B          +1    64     IE1     BIT     8BH
  008A          +1    65     IT1     BIT     8AH
  0089          +1    66     IE0     BIT     89H
  0088          +1    67     IT0     BIT     88H
                +1    68             
  0089          +1    69     TMOD    DATA    89H
                +1    70     
  00C8          +1    71     T2CON   DATA    0C8H
  00CF          +1    72     TF2     BIT     0CFH
  00CE          +1    73     EXF2    BIT     0CEH
  00CD          +1    74     RCLK    BIT     0CDH
  00CC          +1    75     TCLK    BIT     0CCH
  00CB          +1    76     EXEN2   BIT     0CBH
  00CA          +1    77     TR2     BIT     0CAH
  00C9          +1    78     C_T2    BIT     0C9H
  00C8          +1    79     CP_RL2  BIT     0C8H
                +1    80             
  00C9          +1    81     T2MOD   DATA    0C9H    
  008A          +1    82     TL0     DATA    8AH
  008B          +1    83     TL1     DATA    8BH
  00CC          +1    84     TL2     DATA    0CCH
  008C          +1    85     TH0     DATA    8CH
  008D          +1    86     TH1     DATA    8DH
  00CD          +1    87     TH2     DATA    0CDH    
  00CA          +1    88     RCAP2L  DATA    0CAH    
  00CB          +1    89     RCAP2H  DATA    0CBH    
  00A6          +1    90     WDTRST  DATA    0A6H    
  00A7          +1    91     WDTPRG  DATA    0A7H    
                +1    92     
                +1    93     
                +1    94     ;------------------- UART registers ------------------------
  0098          +1    95     SCON    DATA    98H
  009F          +1    96     SM0     BIT     9FH
  009F          +1    97     FE      BIT     9FH
  009E          +1    98     SM1     BIT     9EH
  009D          +1    99     SM2     BIT     9DH
  009C          +1   100     REN     BIT     9CH
  009B          +1   101     TB8     BIT     9BH
  009A          +1   102     RB8     BIT     9AH
  0099          +1   103     TI      BIT     99H
  0098          +1   104     RI      BIT     98H
                +1   105     
  0099          +1   106     SBUF    DATA    99H
  00B9          +1   107     SADEN   DATA    0B9H
  00A9          +1   108     SADDR   DATA    0A9H    
                +1   109     
                +1   110     ;-------------------- ADC registers ----------------------
  00F2          +1   111     ADCLK   DATA    0F2H    
  00F3          +1   112     ADCON   DATA    0F3H    
  00F4          +1   113     ADDL    DATA    0F4H    
  00F5          +1   114     ADDH    DATA    0F5H    
  00F6          +1   115     ADCF    DATA    0F6H    
                +1   116     
                +1   117     ;-------------------- FLASH EEPROM registers ------------
  00F1          +1   118     FPGACON  DATA   0F1H    
  00D1          +1   119     FCON    DATA    0D1H    
  00D2          +1   120     EECON   DATA    0D2H    
  008E          +1   121     AUXR    DATA    8EH
  00A2          +1   122     AUXR1   DATA    0A2H
                +1   123     
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:30:05 PAGE     3

                +1   124     ;-------------------- IT registers -----------------------
  00F8          +1   125     IPL1    DATA    0F8H    
  00F7          +1   126     IPH1    DATA    0F7H    
  00A8          +1   127     IEN0    DATA    0A8H    
  00B8          +1   128     IPL0    DATA    0B8H    
  00B7          +1   129     IPH0    DATA    0B7H    
  00E8          +1   130     IEN1    DATA    0E8H    
                +1   131     
                +1   132     ;  IEN0  
  00AF          +1   133     EA      BIT     0AFH
  00AE          +1   134     EC      BIT     0AEH
  00AD          +1   135     ET2     BIT     0ADH
  00AC          +1   136     ES      BIT     0ACH
  00AB          +1   137     ET1     BIT     0ABH
  00AA          +1   138     EX1     BIT     0AAH
  00A9          +1   139     ET0     BIT     0A9H
  00A8          +1   140     EX0     BIT     0A8H
                +1   141     
                +1   142     ;  IEN1 
  00EA          +1   143     ETIM    BIT     0EAH
  00E9          +1   144     EADC    BIT     0E9H
  00E8          +1   145     ECAN    BIT     0E8H
                +1   146     
                +1   147     ;--------------------- PCA registers --------------------
  00D8          +1   148     CCON    DATA    0D8H    
  00DF          +1   149     CF              BIT             0DFH
  00DE          +1   150     CR              BIT             0DEH
  00D4          +1   151     CCF4    BIT             0D4H
  00D3          +1   152     CCF3    BIT             0D3H
  00D2          +1   153     CCF2    BIT             0D2H
  00D1          +1   154     CCF1    BIT             0D1H
  00D0          +1   155     CCF0    BIT             0D0H
                +1   156     
  00D9          +1   157     CMOD    DATA    0D9H    
  00F9          +1   158     CH      DATA    0F9H    
  00E9          +1   159     CL      DATA    0E9H    
  00FA          +1   160     CCAP0H  DATA    0FAH    
  00EA          +1   161     CCAP0L  DATA    0EAH    
  00DA          +1   162     CCAPM0  DATA    0DAH    
  00FB          +1   163     CCAP1H  DATA    0FBH    
  00EB          +1   164     CCAP1L  DATA    0EBH    
  00DB          +1   165     CCAPM1  DATA    0DBH    
  00FC          +1   166     CCAP2H  DATA    0FCH    
  00EC          +1   167     CCAP2L  DATA    0ECH    
  00DC          +1   168     CCAPM2  DATA    0DCH    
  00FD          +1   169     CCAP3H  DATA    0FDH    
  00ED          +1   170     CCAP3L  DATA    0EDH    
  00DD          +1   171     CCAPM3  DATA    0DDH    
  00FE          +1   172     CCAP4H  DATA    0FEH    
  00EE          +1   173     CCAP4L  DATA    0EEH    
  00DE          +1   174     CCAPM4  DATA    0DEH    
                +1   175     
                +1   176     ;------------------- CAN registers --------------------------
  009B          +1   177     CANGIT          DATA    09BH
  009C          +1   178     CANTEC          DATA    09CH
  009D          +1   179     CANREC          DATA    09DH
  00A1          +1   180     CANTCON         DATA    0A1H    
  00A3          +1   181     CANMSG          DATA    0A3H    
  00A4          +1   182     CANTTCL         DATA    0A4H    
  00A5          +1   183     CANTTCH         DATA    0A5H    
  00AA          +1   184     CANGSTA         DATA    0AAH
  00AB          +1   185     CANGCON         DATA    0ABH
  00AC          +1   186     CANTIML         DATA    0ACH    
  00AD          +1   187     CANTIMH         DATA    0ADH    
  00AE          +1   188     CANSTMPL        DATA    0AEH    
  00AF          +1   189     CANSTMPH        DATA    0AFH
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:30:05 PAGE     4

  00B1          +1   190     CANPAGE         DATA    0B1H
  00B2          +1   191     CANSTCH         DATA    0B2H    
  00B3          +1   192     CANCONCH        DATA    0B3H    
  00B4          +1   193     CANBT1          DATA    0B4H
  00B5          +1   194     CANBT2          DATA    0B5H
  00B6          +1   195     CANBT3          DATA    0B6H
  00BA          +1   196     CANSIT1         DATA    0BAH
  00BB          +1   197     CANSIT2         DATA    0BBH    
  00BC          +1   198     CANIDT1         DATA    0BCH
  00BD          +1   199     CANIDT2         DATA    0BDH    
  00BE          +1   200     CANIDT3         DATA    0BEH    
  00BF          +1   201     CANIDT4         DATA    0BFH    
  00C1          +1   202     CANGIE          DATA    0C1H
  00C2          +1   203     CANIE1          DATA    0C2H    
  00C3          +1   204     CANIE2          DATA    0C3H
  00C4          +1   205     CANIDM1         DATA    0C4H
  00C5          +1   206     CANIDM2         DATA    0C5H
  00C6          +1   207     CANIDM3         DATA    0C6H
  00C7          +1   208     CANIDM4         DATA    0C7H
  00CE          +1   209     CANEN1          DATA    0CEH
  00CF          +1   210     CANEN2          DATA    0CFH
                +1   211     
                +1   212     
                     213     
                     214     
----                 215     DSEG AT 30h
                     216     
  0054               217             cursor DATA 54h
  0053               218             blockIndex DATA 53h
  0057               219             blockIteration DATA 57h
  005A               220             ADCVal DATA 5Ah
----                 221     CSEG    
                     222     ;Boot code
0000                 223     ORG 0000h
0000 020046          224     LJMP init 
                     225     
                     226     ;Interrupt address vectors
000B                 227     ORG 000Bh
000B 0200AB          228     LJMP ISR_tmr0
                     229     
001B                 230     ORG 001Bh
001B 020117          231     LJMP ISR_tmr1
                     232     
0043                 233     ORG 0043h
0043 02014E          234     LJMP ISR_ADC
                     235     
                     236     
                     237     
                     238     
                     239     ;Address declarations
  0030               240     vidMemStart EQU 030h
  0052               241     vidMemEnd EQU 052h
  0023               242     vidMemLength EQU 35
                     243     
  0028               244     numberOfCollumns EQU 40
  0007               245     numberOfRows EQU 7
  0005               246     bytesPerRow EQU 5
                     247             
  0008               248     bytesPerBlock EQU 8
                     249             
  00FE               250     cursorByte EQU 11111110b
  0001               251     cursorByteMask EQU 00000001b
                     252     
                     253     
                     254     
                     255     
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:30:05 PAGE     5

                     256     ;Initialization code
0046                 257     init:   
                     258     
                     259     ;**************** Init Timers **********************************
0046 758911          260                             MOV TMOD,#00010001b ;config tmr0 & tmr1 in 16bit mode
0049 758CFF          261                             MOV TH0,#0FFh ;tmr0 MSB
004C 758AFF          262                             MOV TL0,#0FFh ;tmr0 LSB
                     263                             
004F 758DFF          264                             MOV TH1,#0FFh ;tmr0 MSB
0052 758BFF          265                             MOV TL1,#0FFh ;tmr0 LSB
                     266                             
0055 D2AB            267                             SETB ET1
0057 D2A9            268                             SETB ET0 ;enable interrupt of tmr0
                     269     
                     270     
0059 758170          271                             MOV SP, #70h ; move stackpointer above registers
                     272                              
                     273                              
005C 1201B7          274             LCALL gameInit
                     275     
                     276     ;*********************** ADC CONFIG ***********************************************
                     277             ; Setup for the ADC
005F 75F6FF          278             MOV ADCF,#0FFh ;enable the adc...
0062 D2E9            279             SETB EADC
0064 75F32F          280             MOV ADCON, #00101111b ; set P1.0 as ADC input
0067 755A60          281             MOV ADCVal,#01100000b
                     282     
                     283             
                     284     ;************* end of init: enable timers *********************
                     285     
006A D28C            286     SETB TR0 ;run tmr0
006C D28E            287     SETB TR1
006E D2AF            288     SETB EA ;global interrupt enable
                     289     
0070 C2A3            290     CLR P2.3 ;led to see if code is running
0072 020075          291     LJMP main
                     292     
                     293                             
                     294     ;*********************************Main program***************************************
0075                 295     main:           
                     296     ;does except update the random numbers actually everything happens timer based since the up
                             dating of either one is mutually exclusive, 
                     297     ;no interrupt may happen while they are busy
0075 120204          298             LCALL LFSR ; update random value
0078 3059FA          299             JNB 59h, main ; if not game over go back to main
                     300                                     ;this is the game over routine
007B C2D4            301             CLR RS1 ;move to registerbank 00h to 08h
007D C2D3            302             CLR RS0 
                     303             ;stop timers shortly to not interrupt the vid mem update, this routine only happens
                              when game over so no problem
007F C2AF            304             CLR EA ;global interrupt disable since the video memory may not be updated while th
                             e screen is updated
0081 C28C            305             CLR TR0 ;stop tmr0
0083 C28E            306             CLR TR1
                     307                             
0085 7827            308             MOV R0,#39
0087 7900            309             MOV R1,#0
0089 900284          310             MOV DPTR,#game_over ;this pushes the game over message to the RAM
008C                 311     gameOverLoop:
008C E8              312             MOV A,R0
008D 93              313             MOVC A,@A+DPTR
008E FF              314             MOV R7,A
008F 1201D3          315             LCALL dispColShift
0092 D8F8            316             DJNZ R0,gameOverLoop
0094 E8              317             MOV A,R0
0095 93              318             MOVC A,@A+DPTR
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:30:05 PAGE     6

0096 FF              319             MOV R7,A
0097 1201D3          320             LCALL dispColShift
                     321             ;restart the timers after update
009A D28C            322             SETB TR0 ;run tmr0
009C D28E            323             SETB TR1
009E D2AF            324             SETB EA ;global interrupt enable
                     325     
00A0 1201EB          326             LCALL delay ;delay for a while (blocking delay)
00A3 1201B7          327             LCALL gameInit ;re init the game
00A6 C259            328             CLR 59h  ;set state in running game
                     329             
00A8 020075          330             LJMP main
                     331                     
                     332     ;******************************* Interrupt handlers *********************************
                     333     
                     334     ; This timer refreshes the screen at a fast enough rate
                     335     ; it gets the data from the ram and shifts it onto the display.
                     336     ; based on the value of the ADC it also shows the cursor on the correct location.  
00AB                 337     ISR_tmr0: 
00AB C2AF            338                             CLR EA ;global interrupt disable since the video memory may not be 
                             updated while the screen is updated
00AD C28C            339                             CLR TR0 ;stop tmr0
00AF C28E            340                             CLR TR1
                     341                             
                     342                             ;reload timer0
00B1 758CD0          343                             MOV TH0,#0D0h ;tmr0 MSB
00B4 758A00          344                             MOV TL0,#000h ;tmr0 LSB
                     345                             
                     346     ;DISPLAY PART
00B7 C2D4            347                     CLR RS1 ;move to registerbank 08h to 0Fh to prevent overwriting of register
                             s
00B9 D2D3            348                     SETB RS0
                     349                     
                     350             ;This parts displays the game background on the screen from ram
00BB 7907            351                     MOV R1, #numberOfRows ;counting register to 8 for rows
00BD 7A7F            352                     MOV R2, #01111111b ;data rows (msb = 0, others are 1) single bit zero, to e
                             nable current row
00BF 7830            353                     MOV R0, #vidMemStart ; starting adress disp mem
00C1                 354     rowIteration:
                     355     
00C1 7F05            356                             MOV R7, #bytesPerRow ; counter for 5 bytes of row data
00C3                 357     lineBytes:
00C3 E6              358                             MOV A,@R0 ; get data from ram starting at the lowest address
00C4 FE              359                             MOV R6,A ; move data to R6 to shift it into the screen
00C5 3166            360                             acall shiftR6 ; shift byte into screen
00C7 08              361                             INC R0 ; increase address by one for next byte to put onto the scre
                             en
00C8 DFF9            362                             DJNZ R7,lineBytes ; rinse and repeat for the full row
                     363                             
                     364                             ;shift R2 with the current row enabled in the register
00CA EA              365                             MOV A,R2
00CB FE              366                             MOV R6, A
00CC 3166            367                             Acall shiftR6 ; shift column data byte into SR
00CE D2B2            368                             SETB P3.2 ; cycle store clock
00D0 C2B2            369                             CLR P3.2
                     370     
                     371                             ;rotate row bit to enable next row
00D2 EA              372                             MOV A, R2 
00D3 03              373                             RR A
00D4 FA              374                             MOV R2,A
                     375                              ; repeat until 7 rows done
00D5 D9EA            376                             DJNZ R1, rowIteration
                     377     
                     378     
00D7 7906            379                             MOV R1, #06
00D9                 380     blankDisplay:                    ;loop to approximate the timing of the other rows to have 
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:30:05 PAGE     7

                             similar brightness
00D9 7EFF            381                             MOV R6, #0FFh
00DB 3166            382                             Acall shiftR6 ; shift collumn data byte into SR
00DD D9FA            383                             DJNZ R1,blankDisplay
                     384                             
00DF D2B2            385                             SETB P3.2 ; cycle store clock
00E1 C2B2            386                             CLR P3.2
                     387                             
00E3 205926          388                             JB 59h,afterCollision ; if game over skip the cursor
                     389             ;This part displays the cursor, making use of the duty cycle of the previous displa
                             y part over the timerperiod,
                     390             ;the bringhtness of the cursor can be controlled
                     391             
00E6 7904            392                             MOV R1, #04  ;the first 4 bytes that are shifted into the register 
                             puts all those leds off
00E8                 393     cursorLbl:                       ;loop to approximate the timing of the other rows to have 
                             similar brightness
00E8 7EFF            394                             MOV R6, #0FFh
00EA 3166            395                             Acall shiftR6 ; shift collumn data byte into SR
00EC D9FA            396                             DJNZ R1,cursorLbl
                     397                             
00EE 7EFE            398                             MOV R6, #cursorByte ;shift this byte into the shift registers to en
                             able a led in the eight row of the display to be matched with the cursor location
00F0 3166            399                             Acall shiftR6 ; shift collumn data byte into SR
                     400                             
                     401     
                     402                             ;MOV R6, #11101111b
00F2 E55A            403                             MOV A,ADCVal ;get the last updated value of the adc to A
00F4 75F025          404                             MOV B,#37 
00F7 84              405                             DIV AB ;divide the ADC value to get a value between 0 and 6 to for 
                             the cursor position
00F8 FE              406                             MOV R6, A ;stockate in R6
00F9 74FD            407                             MOV A,#11111101b ;A single pixel for the row enable
                     408     
00FB                 409             locationLbl:
00FB 23              410                             RL A
00FC DEFD            411                             DJNZ R6,locationLbl  ;rotate cursor data equal to location previous
                             ly calculated
00FE 4401            412                             ORL A,#00000001b ;mask data over the display       ;TODO: mag evt w
                             eg
0100 F554            413                             MOV cursor,A
0102 FE              414                             MOV R6,A ; move cursor data to R6 for shift
                     415                             
0103 3166            416                             Acall shiftR6 ; shift cursor position data byte into SR for row ena
                             ble
0105 D2B2            417                             SETB P3.2 ; cycle store clock
0107 C2B2            418                             CLR P3.2
                     419                             
                     420                             
0109 120177          421                             LCALL detectCollision ; check if a collision with the background ha
                             ppened with the current cursor position ;TODO: mag evt na de timers geplaatst worden
010C                 422                             afterCollision:
                     423     
010C C2D4            424                             CLR RS1 ;move to registerbank 00h to 08h
010E C2D3            425                             CLR RS0 
                     426                             ;reenable timers
0110 D28C            427                             SETB TR0 ;run tmr0
0112 D28E            428                             SETB TR1
0114 D2AF            429                             SETB EA ;global interrupt disable
                     430                             
0116 32              431                             RETI
                     432     
                     433     ;************************** This timers updates the background of the game ****************
                             ******************
0117                 434     ISR_tmr1:
                     435     ;DISPLAY PART
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:30:05 PAGE     8

0117 C28C            436                     CLR TR0 ;stop timer during buffer update
0119 C28E            437                     CLR TR1 ;stop timer during buffer update
011B C2AF            438                     CLR EA ;global interrupt disable
                     439                     
                     440                     ;reload timers
011D 758D00          441                     MOV TH1,#00h ;tmr0 MSB
0120 758B00          442                     MOV TL1,#00h ;tmr0 LSB
                     443                     
0123 C0E0            444                     push Acc
0125 20591B          445                     JB 59h,afterRandom
                     446                     ;get the current block index from ram
0128 E553            447                     MOV A, blockIndex
012A 90023C          448                     MOV DPTR, #block0               ; start at block0 and count from there
012D 93              449                     MOVC A,@A+DPTR
012E FF              450                     MOV R7,A ; stockate data in R7 for collumnshift function
012F 1201D3          451                     LCALL dispColShift ; shift the new collumn in
                     452                     
0132 E553            453                     MOV A, blockIndex ; retrieve current data offset
0134 04              454                     INC A; advance one adress
0135 F553            455                     MOV blockIndex, A ; save current adress
                     456                     
0137 AB57            457                     MOV R3, blockIteration ;get current iteration from address this counts the 
                             number of collumns from a certain block that have already been shifted
                     458                     
0139 DB08            459                     DJNZ R3, afterRandom ; if the last collumn of the block is not updated jump
                              over the generation of the next block
                     460                     
013B 7B08            461                     MOV R3,#bytesPerBlock ; repeat 4 times
013D E518            462                     MOV A,18h ; get data from MSB LFSR
013F 5438            463                     ANL A,#0111000b ;mask for the number of blocks  instead of dividing, this k
                             eeps 8 possible values for the 8 blocks,
                     464                                                     ;with a distance of 8 from each other match
                             ing the number of collumns of a block
0141 F553            465                     MOV blockIndex, A ; save current adress for next block
                     466     
0143                 467             afterRandom:
0143 8B57            468                     MOV blockIteration,R3 ;this saves the current shifted collumn count of a bl
                             ock in ram 
                     469                     ;pop A and restart timers
0145 D0E0            470                     pop Acc
0147 D28E            471                     SETB TR1 
0149 D28C            472                     SETB TR0
014B D2AF            473                     SETB EA
                     474     
014D 32              475     reti
                     476     
                     477     
                     478     ;*********************** This interrupt updates the value from the ADC ********************
                             **************
014E                 479     ISR_ADC:
                     480     
014E C28C            481                     CLR TR0 ;stop timer during buffer update
0150 C28E            482                     CLR TR1 ;stop timer during buffer update
0152 C2AF            483                     CLR EA ;global interrupt disable
                     484                     
0154 C0E0            485     push Acc
0156 E5F5            486             MOV A, ADDH ;get the highest 8 bits, low resolution is not needed,
0158 F55A            487             MOV ADCVal,A ; move the value to ram
015A 75F32F          488             MOV ADCON, #00101111b ; set P1.0 as ADC input, restart conversion
015D D0E0            489     pop Acc
                     490     
015F D28E            491                     SETB TR1 ;stop timer during buffer update
0161 D28C            492                     SETB TR0
0163 D2AF            493                     SETB EA
0165 32              494     reti
                     495     
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:30:05 PAGE     9

                     496     
                     497     ;******************************************************************************************
                             ************
                     498     ;********************************* HELPER FUNCTIONS ***************************************
                             **********
                     499     ;******************************************************************************************
                             **********
                     500     
                     501     
                     502     ;**************************$ This function shifts the byte stockated in R6 into the shiftre
                             gisters connected to P4.1****************************************
0166                 503     shiftR6:
0166 C0E0            504                                     push Acc
0168 EE              505                                     MOV A, R6  ; move the value to A
0169 7E08            506                                     MOV R6, #08 ;counting register to 8
016B                 507                                     Reg:
016B 13              508                                     RRC A ;rotate accumulator troug carre to get the the LSB in
                             to the carry
016C 92C1            509                                     MOV P4.1,C ;carry to the data pin
016E D2C0            510                                     SETB P4.0 ; cycle serial clock
0170 C2C0            511                                     CLR P4.0
0172 DEF7            512                                     DJNZ R6,Reg ;if 8 bits are shifted go further otherwise rep
                             eat
0174 D0E0            513                                     pop Acc
0176 22              514                                     ret
                     515     
                     516     ;**************************$ This function detects the collisions of the cursor with the ba
                             ckground blocks **************************************************
0177                 517     detectCollision:
                     518     
                     519     ; this moves the eight collumn of the display data into a single byte to be matched with th
                             e cursor position
0177 E534            520             MOV A,34h ;get the byte of the first row
0179 13              521             RRC A ;shift the LSB into the carry, this matches the eight collumn of that row.
017A 9267            522             MOV 67h,C ;stockate C in the MSB of the collumn
                     523             
017C E539            524             MOV A,39h ;second row
017E 13              525             RRC A
017F 9266            526             MOV 66h,C ;C to MSB-1
                     527             
0181 E53E            528             MOV A,3Eh
0183 13              529             RRC A
0184 9265            530             MOV 65h,C
                     531             
0186 E543            532             MOV A,43h
0188 13              533             RRC A
0189 9264            534             MOV 64h,C
                     535             
018B E548            536             MOV A,48h
018D 13              537             RRC A
018E 9263            538             MOV 63h,C
                     539             
0190 E54D            540             MOV A,4Dh
0192 13              541             RRC A
0193 9262            542             MOV 62h,C
                     543             
0195 E552            544             MOV A,52h ; seventh row, to LSB + 1
0197 13              545             RRC A
0198 9261            546             MOV 61h,C
                     547     
019A C260            548             CLR 60h ; clear the LSB ;TODO needed?
                     549             
019C E52C            550             MOV A,2Ch ;move the constructed byte to A
019E F4              551             CPL A ; complement it because all the 0 represent walls
019F F52C            552             MOV 2Ch,A ; move it back
                     553     
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:30:05 PAGE    10

01A1 E554            554             MOV A,cursor ; get the cursor data
01A3 F4              555             CPL A ; complement it since the 0 is where the cursor is, all others should be 1
01A4 54FE            556             ANL A,#11111110b ; mask it so possible residual data on the invisible eight row doe
                             s not influence the detection
01A6 552C            557             ANL A,2Ch ; And the cursor positon in A with the eight collumn of the screen
                     558                               ; if the cursor is on the same location as a lit pixel (obstackle
                             /wall) the AND will produce a 1 on a certain position
                     559             
01A8 7001            560             JNZ dead ; if the AND action is !=0 a collision is detected , then jump to the dead
                              routine
                     561     
01AA 22              562             ret
                     563             
                     564     ;***************** This routine is executed when a collision is detected ******************
                             **
01AB                 565     dead:
                     566     
                     567     ; this clear the game field in ram
01AB 7828            568     MOV R0,#numberOfCollumns
01AD                 569     gameReset:
01AD 7FFF            570                     MOV R7,#0FFh ; stockate data in R7 for collumnshift
01AF 1201D3          571                     LCALL dispColShift
01B2 D8F9            572                     DJNZ R0, gameReset
01B4 D259            573     SETB 59h ;set game over state
01B6 22              574     ret ;return to caller (ISR_tmr0)
                     575     
                     576     
01B7                 577     gameInit:
                     578     ;***************** Initialize ram to all ones (all leds off)*******************************
                                           
01B7 7830            579                             MOV R0,#vidMemStart 
01B9 7928            580                             MOV R1,#numberOfCollumns
01BB                 581     ramInit:
01BB 76FF            582                             MOV @R0,#0FFh
01BD 08              583                             INC R0
01BE D9FB            584                             DJNZ R1,ramInit
                     585                             
                     586     ;***************** Init the game logic  *************************
01C0 75186A          587     MOV 18h, #1101010b 
                     588     
01C3 7B08            589     MOV R3,#bytesPerBlock ; repeat 4 times
01C5 E518            590     MOV A,18h ; get data from MSB LFSR
01C7 5438            591     ANL A,#0111000b ;mask for the number of blocks          
01C9 F553            592     MOV blockIndex, A ; save current adress for next block
01CB 120204          593     LCALL LFSR  ; generate new random data
01CE B2A4            594     CPL P2.4 ; toggle led to see if working
01D0 8B57            595     MOV blockIteration,R3
                     596     
01D2 22              597     ret
                     598     
                     599     
                     600     
                     601             
                     602     
                     603     ;*************************** This function shifts a collumn in the game to make it go forwa
                             rd *******************
                     604     
                     605     ;shift 7 MSB in framebuffer
01D3                 606     dispColShift:
01D3 EF              607             MOV A, R7 ; move the collumn that needs to be shifted in from R7 into A
01D4 7D07            608             MOV     R5, #numberOfRows ;counter to count rows 
01D6 7930            609             MOV R1, #vidMemStart ; start at lowest address to increase each time
01D8                 610     dispColShiftLoop: ; this part is looped
01D8 13              611             RRC A ;Rotate LSB in carry to shift into the row
01D9 7E05            612             MOV     R6, #bytesPerRow ; counter to rotate 5 horizontal bytes will be used in dis
                             pRowShift to count the progress
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:30:05 PAGE    11

                     613             
01DB C0E0            614             PUSH ACC ; push acc to save current data of A
01DD 31E4            615             ACALL dispRowShift ; rotate all row bytes 
01DF D0E0            616             POP ACC ;pop the accumulator
01E1 DDF5            617             DJNZ R5, dispColShiftLoop ; repeat until all rows are shifted
01E3 22              618             RET
                     619             
                     620             
                     621             ;TODO move this into the dispColShiftLoop instead of calling it
01E4                 622     dispRowShift: ; this rotates the carry into the current memory address
01E4 E7              623             MOV A,@R1 ;start at the current addres and move it from RAM into A
01E5 33              624             RLC A ;rotate the carry into the LSB of the current byte, the LSB comes into the th
                             e carry 
01E6 F7              625             MOV @R1,A ;move the updated byte back into ram
01E7 09              626             INC R1   ;increase for the next byte
01E8 DEFA            627             DJNZ R6, dispRowShift ; do this until the current row is updated. The carry becomes
                              the LSB, the MSB becomes the carry to become the LSB of the next byte
01EA 22              628             RET
                     629             
                     630             
                     631             
                     632             
                     633     ;rudimentary delay for test purposes
01EB                 634     delay:   
01EB 7D0F            635                     MOV R5, #0Fh
01ED 1201F1          636                     LCALL loop
01F0 22              637                     RET
                     638     
01F1                 639     loop:   
01F1 7E00            640                     MOV R6, #00h
01F3 1201F9          641                     LCALL loop2
01F6 DDF9            642                     DJNZ R5, loop
01F8 22              643                     RET
01F9                 644     loop2:  
01F9 7F00            645                     MOV R7, #00h
01FB 120201          646                     LCALL loop3
01FE DEF9            647                     DJNZ R6, loop2
0200 22              648                     RET
                     649                     
0201 DFFE            650     loop3:  DJNZ R7,loop3
0203 22              651                     RET
                     652                     
                     653     ;**********************************************************************************        
                                  
                     654     ;random number generator code trough LFSR               
0204                 655     LFSR: 
0204 D2D4            656             SETB RS1 ;move to registerbank 08h to 0Fh
0206 D2D3            657             SETB RS0
0208 E8              658             MOV A,R0 ;Save highest byte to address
0209 FC              659             MOV R4,A
020A 12022F          660             lcall LFSRShift
020D 12022F          661             lcall LFSRShift
0210 6C              662             XRL A,R4
0211 FC              663             MOV R4,A
0212 12022F          664             lcall LFSRShift
0215 12022F          665             lcall LFSRShift
0218 12022F          666             lcall LFSRShift
021B 12022F          667             lcall LFSRShift
021E 6C              668             XRL A,R4
021F FC              669             MOV R4,A                
0220 12022F          670             lcall LFSRShift
0223 6C              671             XRL A,R4
0224 FC              672             MOV R4,A
0225 12022F          673             lcall LFSRShift
0228 EC              674             MOV A,R4
0229 FB              675             MOV R3,A
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:30:05 PAGE    12

                     676             
022A C2D4            677             CLR RS1 ;move to registerbank 08h to 0Fh
022C C2D3            678             CLR RS0
                     679             
022E 22              680             RET
                     681             
                     682     ;shift the 32 bit registers of the LFSR
022F                 683     LFSRShift: 
022F EB              684             MOV A,R3 ; rotate shift register
0230 33              685             RLC A
0231 FB              686             MOV R3,A
0232 EA              687             MOV A,R2 ; rotate shift register
0233 33              688             RLC A
0234 FA              689             MOV R2,A
0235 E9              690             MOV A,R1 ; rotate shift register
0236 33              691             RLC A
0237 F9              692             MOV R1,A
0238 E8              693             MOV A,R0 ; rotate shift register
0239 33              694             RLC A
023A F8              695             MOV R0,A
023B 22              696             ret     
                     697             
                     698     ;******************************************************************************************
                             ***********************
                     699     ;************************************* DIRECT BYTES IN CODE MEMORY ************************
                             **********************
                     700     ;******************************************************************************************
                             ********************$
                     701     
                     702     ;*********************** These are the obstackle blocks ***********************************
                             ****************
023C                 703             block0:
023C 3E              704             db 0x3e
023D 3E              705             db 0x3e
023E 3E              706             db 0x3e
023F 3E              707             db 0x3e
0240 3E              708             db 0x3e
0241 3E              709             db 0x3e
0242 3E              710             db 0x3e
0243 3E              711             db 0x3e
                     712             
                     713             
0244                 714             block1:
                     715             
0244 3E              716             db 0x3e
0245 3E              717             db 0x3e
0246 3E              718             db 0x3e
0247 1C              719             db 0x1C
0248 1C              720             db 0x1C
0249 1C              721             db 0x1C
024A 3E              722             db 0x3e
024B 3E              723             db 0x3e
                     724             
024C                 725             block2:
                     726             
024C 3E              727             db 0x3e
024D 3E              728             db 0x3e
024E 3E              729             db 0x3e
024F 38              730             db 0x38
0250 38              731             db 0x38
0251 38              732             db 0x38
0252 3E              733             db 0x3e
0253 3E              734             db 0x3e
                     735                     
0254                 736             block3:
                     737             
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:30:05 PAGE    13

0254 3E              738             db 0x3e
0255 3E              739             db 0x3e
0256 3E              740             db 0x3e
0257 18              741             db 0x18
0258 18              742             db 0x18
0259 18              743             db 0x18
025A 3E              744             db 0x3e
025B 3E              745             db 0x3e
                     746                     
025C                 747             block4:
                     748             
025C 3E              749             db 0x3e
025D 3E              750             db 0x3e
025E 3E              751             db 0x3e
025F 06              752             db 0x06
0260 06              753             db 0x06
0261 3E              754             db 0x3e
0262 3E              755             db 0x3e
0263 3E              756             db 0x3e
                     757             
0264                 758             block5:
0264 3E              759             db 0x3e
0265 3E              760             db 0x3e
0266 3E              761             db 0x3e
0267 08              762             db 0x08
0268 08              763             db 0x08
0269 3E              764             db 0x3e
026A 3E              765             db 0x3e
026B 3E              766             db 0x3e
                     767                     
026C                 768             block6:
                     769             
026C 3E              770             db 0x3e
026D 3E              771             db 0x3e
026E 3E              772             db 0x3e
026F 32              773             db 0x32
0270 32              774             db 0x32
0271 3E              775             db 0x3e
0272 3E              776             db 0x3e
0273 3E              777             db 0x3e
                     778                     
0274                 779             block7:
0274 3E              780             db 0x3e
0275 3E              781             db 0x3e
0276 3E              782             db 0x3e
0277 26              783             db 0x26
0278 26              784             db 0x26
0279 3E              785             db 0x3e
027A 3E              786             db 0x3e
027B 3E              787             db 0x3e
                     788                     
027C                 789             block8:
027C 3E              790             db 0x3e
027D 3E              791             db 0x3e
027E 3E              792             db 0x3e
027F 26              793             db 0x26
0280 26              794             db 0x26
0281 3E              795             db 0x3e
0282 3E              796             db 0x3e
0283 3E              797             db 0x3e
                     798                     
                     799     ;Letters for the game over message
0284                 800     game_over:
                     801     
                     802             ;;r
0284 CB              803             db 11001011b
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:30:05 PAGE    14

0285 F5              804             db 11110101b
0286 F5              805             db 11110101b
0287 C1              806             db 11000001b
                     807             ;;e
0288 FF              808             db 11111111b
0289 D5              809             db 11010101b
028A D5              810             db 11010101b
028B C1              811             db 11000001b
028C FF              812             db 11111111b
                     813             
                     814             ;;v
028D E1              815             db 11100001b
028E DF              816             db 11011111b
028F DF              817             db 11011111b
0290 E1              818             db 11100001b
0291 FF              819             db 11111111b
                     820                     
                     821             ;;o
0292 C1              822             db 11000001b
0293 DD              823             db 11011101b
0294 DD              824             db 11011101b
0295 C1              825             db 11000001b
0296 FF              826             db 11111111b
                     827                     
                     828             ;;space
0297 FF              829             db 11111111b
                     830             
                     831             ;;e
0298 FF              832             db 11111111b
0299 D5              833             db 11010101b
029A D5              834             db 11010101b
029B C1              835             db 11000001b
029C FF              836             db 11111111b
                     837                     
                     838             ;;m     
029D C1              839             db 11000001b    
029E FB              840             db 11111011b
029F F7              841             db 11110111b
02A0 FB              842             db 11111011b
02A1 C1              843             db 11000001b
02A2 FF              844             db 11111111b
                     845                     
                     846             ;;a
02A3 C3              847             db 11000011b
02A4 F5              848             db 11110101b
02A5 F5              849             db 11110101b
02A6 C3              850             db 11000011b
02A7 FF              851             db 11111111b    
                     852     
                     853             ;;G
02A8 C5              854             db 11000101b
02A9 D5              855             db 11010101b
02AA DD              856             db 11011101b
02AB C1              857             db 11000001b
                     858     
                     859                     
                     860     
                     861     END
                             
                                     
                                             
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:30:05 PAGE    15

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

AC . . . . . . . .  B ADDR   00D0H.6 A   
ACC. . . . . . . .  D ADDR   00E0H   A   
ADCF . . . . . . .  D ADDR   00F6H   A   
ADCLK. . . . . . .  D ADDR   00F2H   A   
ADCON. . . . . . .  D ADDR   00F3H   A   
ADCVAL . . . . . .  D ADDR   005AH   A   
ADDH . . . . . . .  D ADDR   00F5H   A   
ADDL . . . . . . .  D ADDR   00F4H   A   
AFTERCOLLISION . .  C ADDR   010CH   A   
AFTERRANDOM. . . .  C ADDR   0143H   A   
AUXR . . . . . . .  D ADDR   008EH   A   
AUXR1. . . . . . .  D ADDR   00A2H   A   
B. . . . . . . . .  D ADDR   00F0H   A   
BLANKDISPLAY . . .  C ADDR   00D9H   A   
BLOCK0 . . . . . .  C ADDR   023CH   A   
BLOCK1 . . . . . .  C ADDR   0244H   A   
BLOCK2 . . . . . .  C ADDR   024CH   A   
BLOCK3 . . . . . .  C ADDR   0254H   A   
BLOCK4 . . . . . .  C ADDR   025CH   A   
BLOCK5 . . . . . .  C ADDR   0264H   A   
BLOCK6 . . . . . .  C ADDR   026CH   A   
BLOCK7 . . . . . .  C ADDR   0274H   A   
BLOCK8 . . . . . .  C ADDR   027CH   A   
BLOCKINDEX . . . .  D ADDR   0053H   A   
BLOCKITERATION . .  D ADDR   0057H   A   
BYTESPERBLOCK. . .  N NUMB   0008H   A   
BYTESPERROW. . . .  N NUMB   0005H   A   
CANBT1 . . . . . .  D ADDR   00B4H   A   
CANBT2 . . . . . .  D ADDR   00B5H   A   
CANBT3 . . . . . .  D ADDR   00B6H   A   
CANCONCH . . . . .  D ADDR   00B3H   A   
CANEN1 . . . . . .  D ADDR   00CEH   A   
CANEN2 . . . . . .  D ADDR   00CFH   A   
CANGCON. . . . . .  D ADDR   00ABH   A   
CANGIE . . . . . .  D ADDR   00C1H   A   
CANGIT . . . . . .  D ADDR   009BH   A   
CANGSTA. . . . . .  D ADDR   00AAH   A   
CANIDM1. . . . . .  D ADDR   00C4H   A   
CANIDM2. . . . . .  D ADDR   00C5H   A   
CANIDM3. . . . . .  D ADDR   00C6H   A   
CANIDM4. . . . . .  D ADDR   00C7H   A   
CANIDT1. . . . . .  D ADDR   00BCH   A   
CANIDT2. . . . . .  D ADDR   00BDH   A   
CANIDT3. . . . . .  D ADDR   00BEH   A   
CANIDT4. . . . . .  D ADDR   00BFH   A   
CANIE1 . . . . . .  D ADDR   00C2H   A   
CANIE2 . . . . . .  D ADDR   00C3H   A   
CANMSG . . . . . .  D ADDR   00A3H   A   
CANPAGE. . . . . .  D ADDR   00B1H   A   
CANREC . . . . . .  D ADDR   009DH   A   
CANSIT1. . . . . .  D ADDR   00BAH   A   
CANSIT2. . . . . .  D ADDR   00BBH   A   
CANSTCH. . . . . .  D ADDR   00B2H   A   
CANSTMPH . . . . .  D ADDR   00AFH   A   
CANSTMPL . . . . .  D ADDR   00AEH   A   
CANTCON. . . . . .  D ADDR   00A1H   A   
CANTEC . . . . . .  D ADDR   009CH   A   
CANTIMH. . . . . .  D ADDR   00ADH   A   
CANTIML. . . . . .  D ADDR   00ACH   A   
CANTTCH. . . . . .  D ADDR   00A5H   A   
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:30:05 PAGE    16

CANTTCL. . . . . .  D ADDR   00A4H   A   
CCAP0H . . . . . .  D ADDR   00FAH   A   
CCAP0L . . . . . .  D ADDR   00EAH   A   
CCAP1H . . . . . .  D ADDR   00FBH   A   
CCAP1L . . . . . .  D ADDR   00EBH   A   
CCAP2H . . . . . .  D ADDR   00FCH   A   
CCAP2L . . . . . .  D ADDR   00ECH   A   
CCAP3H . . . . . .  D ADDR   00FDH   A   
CCAP3L . . . . . .  D ADDR   00EDH   A   
CCAP4H . . . . . .  D ADDR   00FEH   A   
CCAP4L . . . . . .  D ADDR   00EEH   A   
CCAPM0 . . . . . .  D ADDR   00DAH   A   
CCAPM1 . . . . . .  D ADDR   00DBH   A   
CCAPM2 . . . . . .  D ADDR   00DCH   A   
CCAPM3 . . . . . .  D ADDR   00DDH   A   
CCAPM4 . . . . . .  D ADDR   00DEH   A   
CCF0 . . . . . . .  B ADDR   00D0H.0 A   
CCF1 . . . . . . .  B ADDR   00D0H.1 A   
CCF2 . . . . . . .  B ADDR   00D0H.2 A   
CCF3 . . . . . . .  B ADDR   00D0H.3 A   
CCF4 . . . . . . .  B ADDR   00D0H.4 A   
CCON . . . . . . .  D ADDR   00D8H   A   
CF . . . . . . . .  B ADDR   00D8H.7 A   
CH . . . . . . . .  D ADDR   00F9H   A   
CKCON. . . . . . .  D ADDR   008FH   A   
CL . . . . . . . .  D ADDR   00E9H   A   
CMOD . . . . . . .  D ADDR   00D9H   A   
CP_RL2 . . . . . .  B ADDR   00C8H.0 A   
CR . . . . . . . .  B ADDR   00D8H.6 A   
CURSOR . . . . . .  D ADDR   0054H   A   
CURSORBYTE . . . .  N NUMB   00FEH   A   
CURSORBYTEMASK . .  N NUMB   0001H   A   
CURSORLBL. . . . .  C ADDR   00E8H   A   
CY . . . . . . . .  B ADDR   00D0H.7 A   
C_T2 . . . . . . .  B ADDR   00C8H.1 A   
DEAD . . . . . . .  C ADDR   01ABH   A   
DELAY. . . . . . .  C ADDR   01EBH   A   
DETECTCOLLISION. .  C ADDR   0177H   A   
DISPCOLSHIFT . . .  C ADDR   01D3H   A   
DISPCOLSHIFTLOOP .  C ADDR   01D8H   A   
DISPROWSHIFT . . .  C ADDR   01E4H   A   
DPH. . . . . . . .  D ADDR   0083H   A   
DPL. . . . . . . .  D ADDR   0082H   A   
EA . . . . . . . .  B ADDR   00A8H.7 A   
EADC . . . . . . .  B ADDR   00E8H.1 A   
EC . . . . . . . .  B ADDR   00A8H.6 A   
ECAN . . . . . . .  B ADDR   00E8H.0 A   
EECON. . . . . . .  D ADDR   00D2H   A   
ES . . . . . . . .  B ADDR   00A8H.4 A   
ET0. . . . . . . .  B ADDR   00A8H.1 A   
ET1. . . . . . . .  B ADDR   00A8H.3 A   
ET2. . . . . . . .  B ADDR   00A8H.5 A   
ETIM . . . . . . .  B ADDR   00E8H.2 A   
EX0. . . . . . . .  B ADDR   00A8H.0 A   
EX1. . . . . . . .  B ADDR   00A8H.2 A   
EXEN2. . . . . . .  B ADDR   00C8H.3 A   
EXF2 . . . . . . .  B ADDR   00C8H.6 A   
F0 . . . . . . . .  B ADDR   00D0H.5 A   
FCON . . . . . . .  D ADDR   00D1H   A   
FE . . . . . . . .  B ADDR   0098H.7 A   
FPGACON. . . . . .  D ADDR   00F1H   A   
GAMEINIT . . . . .  C ADDR   01B7H   A   
GAMEOVERLOOP . . .  C ADDR   008CH   A   
GAMERESET. . . . .  C ADDR   01ADH   A   
GAME_OVER. . . . .  C ADDR   0284H   A   
IE0. . . . . . . .  B ADDR   0088H.1 A   
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:30:05 PAGE    17

IE1. . . . . . . .  B ADDR   0088H.3 A   
IEN0 . . . . . . .  D ADDR   00A8H   A   
IEN1 . . . . . . .  D ADDR   00E8H   A   
INIT . . . . . . .  C ADDR   0046H   A   
INT0 . . . . . . .  B ADDR   00B0H.2 A   
INT1 . . . . . . .  B ADDR   00B0H.3 A   
IPH0 . . . . . . .  D ADDR   00B7H   A   
IPH1 . . . . . . .  D ADDR   00F7H   A   
IPL0 . . . . . . .  D ADDR   00B8H   A   
IPL1 . . . . . . .  D ADDR   00F8H   A   
ISR_ADC. . . . . .  C ADDR   014EH   A   
ISR_TMR0 . . . . .  C ADDR   00ABH   A   
ISR_TMR1 . . . . .  C ADDR   0117H   A   
IT0. . . . . . . .  B ADDR   0088H.0 A   
IT1. . . . . . . .  B ADDR   0088H.2 A   
LFSR . . . . . . .  C ADDR   0204H   A   
LFSRSHIFT. . . . .  C ADDR   022FH   A   
LINEBYTES. . . . .  C ADDR   00C3H   A   
LOCATIONLBL. . . .  C ADDR   00FBH   A   
LOOP . . . . . . .  C ADDR   01F1H   A   
LOOP2. . . . . . .  C ADDR   01F9H   A   
LOOP3. . . . . . .  C ADDR   0201H   A   
MAIN . . . . . . .  C ADDR   0075H   A   
NUMBEROFCOLLUMNS .  N NUMB   0028H   A   
NUMBEROFROWS . . .  N NUMB   0007H   A   
OV . . . . . . . .  B ADDR   00D0H.2 A   
P. . . . . . . . .  B ADDR   00D0H.0 A   
P0 . . . . . . . .  D ADDR   0080H   A   
P1 . . . . . . . .  D ADDR   0090H   A   
P2 . . . . . . . .  D ADDR   00A0H   A   
P3 . . . . . . . .  D ADDR   00B0H   A   
P4 . . . . . . . .  D ADDR   00C0H   A   
PCON . . . . . . .  D ADDR   0087H   A   
PSW. . . . . . . .  D ADDR   00D0H   A   
RAMINIT. . . . . .  C ADDR   01BBH   A   
RB8. . . . . . . .  B ADDR   0098H.2 A   
RCAP2H . . . . . .  D ADDR   00CBH   A   
RCAP2L . . . . . .  D ADDR   00CAH   A   
RCLK . . . . . . .  B ADDR   00C8H.5 A   
RD . . . . . . . .  B ADDR   00B0H.7 A   
REG. . . . . . . .  C ADDR   016BH   A   
REN. . . . . . . .  B ADDR   0098H.4 A   
RI . . . . . . . .  B ADDR   0098H.0 A   
ROWITERATION . . .  C ADDR   00C1H   A   
RS0. . . . . . . .  B ADDR   00D0H.3 A   
RS1. . . . . . . .  B ADDR   00D0H.4 A   
RXD. . . . . . . .  B ADDR   00B0H.0 A   
SADDR. . . . . . .  D ADDR   00A9H   A   
SADEN. . . . . . .  D ADDR   00B9H   A   
SBUF . . . . . . .  D ADDR   0099H   A   
SCON . . . . . . .  D ADDR   0098H   A   
SHIFTR6. . . . . .  C ADDR   0166H   A   
SM0. . . . . . . .  B ADDR   0098H.7 A   
SM1. . . . . . . .  B ADDR   0098H.6 A   
SM2. . . . . . . .  B ADDR   0098H.5 A   
SP . . . . . . . .  D ADDR   0081H   A   
T0 . . . . . . . .  B ADDR   00B0H.4 A   
T1 . . . . . . . .  B ADDR   00B0H.5 A   
T2CON. . . . . . .  D ADDR   00C8H   A   
T2MOD. . . . . . .  D ADDR   00C9H   A   
TB8. . . . . . . .  B ADDR   0098H.3 A   
TCLK . . . . . . .  B ADDR   00C8H.4 A   
TCON . . . . . . .  D ADDR   0088H   A   
TF0. . . . . . . .  B ADDR   0088H.5 A   
TF1. . . . . . . .  B ADDR   0088H.7 A   
TF2. . . . . . . .  B ADDR   00C8H.7 A   
A51 MACRO ASSEMBLER  MAIN                                                                 05/18/2016 12:30:05 PAGE    18

TH0. . . . . . . .  D ADDR   008CH   A   
TH1. . . . . . . .  D ADDR   008DH   A   
TH2. . . . . . . .  D ADDR   00CDH   A   
TI . . . . . . . .  B ADDR   0098H.1 A   
TL0. . . . . . . .  D ADDR   008AH   A   
TL1. . . . . . . .  D ADDR   008BH   A   
TL2. . . . . . . .  D ADDR   00CCH   A   
TMOD . . . . . . .  D ADDR   0089H   A   
TR0. . . . . . . .  B ADDR   0088H.4 A   
TR1. . . . . . . .  B ADDR   0088H.6 A   
TR2. . . . . . . .  B ADDR   00C8H.2 A   
TXD. . . . . . . .  B ADDR   00B0H.1 A   
VIDMEMEND. . . . .  N NUMB   0052H   A   
VIDMEMLENGTH . . .  N NUMB   0023H   A   
VIDMEMSTART. . . .  N NUMB   0030H   A   
WDTPRG . . . . . .  D ADDR   00A7H   A   
WDTRST . . . . . .  D ADDR   00A6H   A   
WR . . . . . . . .  B ADDR   00B0H.6 A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
